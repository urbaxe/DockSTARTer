{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The main goal of DockSTARTer is to make it quick and easy to get up and running with Docker. You may choose to rely on DockSTARTer for various changes to your Docker system, or use DockSTARTer as a stepping stone and learn to do more advanced configurations. Getting Started System Requirements You must be running a supported platform or an operating system based on a supported platform. Platforms named below will link to documentation listing compatible versions. You must be logged in as a non-root user with sudo permissions. One Time Setup (required) APT Systems ( Debian , Ubuntu , etc) sudo apt-get install curl git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot Raspbian requires a few extra commands sudo apt-get update sudo apt-get dist-upgrade sudo apt-get install curl git bash -c \" $( curl -fsSL https://get.docker.com ) \" bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot OpenMediaVault (OMV) requires special instructions found here DNF Systems ( Fedora ) sudo dnf install curl git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot YUM Systems ( CentOS ) sudo yum install curl git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot Pacman Systems (Arch, Manjaro, EndeavourOS, etc) Note that systems with the pacman package manager will not install docker via the https://get.docker.com script that is used for other distros. The instructions below provide information on installing all required packages manually prior to installing DockSTARTer. sudo pacman -Sy curl docker git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot Alternate install (any system) The standard install above downloads the initial script using a method with some known risks. For those concerned with the security of the above method here is an alternative: ## NOTE: Run the appropriate command for your distro sudo apt-get install curl git sudo dnf install curl git sudo yum install curl git sudo pacman -Sy curl docker git Then git clone https://github.com/GhostWriters/DockSTARTer \"/home/ ${ USER } /.docker\" sudo bash /home/ ${ USER } /.docker/main.sh -vi sudo reboot Running DockSTARTer ds To run DockSTARTer use the command above. You should now see the main menu from the screenshots. Select Configuration and then Full Setup and you will be guided through selecting apps and starting containers. See our documentation for more detailed information. Support Click the chat badge to join us on Discord for support! Feature Request | Bug Report Additional information can be found on our Support Page . Contributors This project exists thanks to all the people who contribute. Supporters Support the project by donating on Open Collective . Backers Thank you to all our backers! Become a backer . Sponsors Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Become a sponsor . Special Thanks SmartHomeBeginner.com for creating AtoMiC-ToolKit that served as this project's primary inspiration, and later this guide that provided some initial direction with Docker. LinuxServer.io for maintaining the majority of the Docker images used in this project.","title":"Home"},{"location":"#_1","text":"The main goal of DockSTARTer is to make it quick and easy to get up and running with Docker. You may choose to rely on DockSTARTer for various changes to your Docker system, or use DockSTARTer as a stepping stone and learn to do more advanced configurations.","title":""},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#system-requirements","text":"You must be running a supported platform or an operating system based on a supported platform. Platforms named below will link to documentation listing compatible versions. You must be logged in as a non-root user with sudo permissions.","title":"System Requirements"},{"location":"#one-time-setup-required","text":"APT Systems ( Debian , Ubuntu , etc) sudo apt-get install curl git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot Raspbian requires a few extra commands sudo apt-get update sudo apt-get dist-upgrade sudo apt-get install curl git bash -c \" $( curl -fsSL https://get.docker.com ) \" bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot OpenMediaVault (OMV) requires special instructions found here DNF Systems ( Fedora ) sudo dnf install curl git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot YUM Systems ( CentOS ) sudo yum install curl git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot Pacman Systems (Arch, Manjaro, EndeavourOS, etc) Note that systems with the pacman package manager will not install docker via the https://get.docker.com script that is used for other distros. The instructions below provide information on installing all required packages manually prior to installing DockSTARTer. sudo pacman -Sy curl docker git bash -c \" $( curl -fsSL https://get.dockstarter.com ) \" sudo reboot Alternate install (any system) The standard install above downloads the initial script using a method with some known risks. For those concerned with the security of the above method here is an alternative: ## NOTE: Run the appropriate command for your distro sudo apt-get install curl git sudo dnf install curl git sudo yum install curl git sudo pacman -Sy curl docker git Then git clone https://github.com/GhostWriters/DockSTARTer \"/home/ ${ USER } /.docker\" sudo bash /home/ ${ USER } /.docker/main.sh -vi sudo reboot","title":"One Time Setup (required)"},{"location":"#running-dockstarter","text":"ds To run DockSTARTer use the command above. You should now see the main menu from the screenshots. Select Configuration and then Full Setup and you will be guided through selecting apps and starting containers. See our documentation for more detailed information.","title":"Running DockSTARTer"},{"location":"#support","text":"Click the chat badge to join us on Discord for support! Feature Request | Bug Report Additional information can be found on our Support Page .","title":"Support"},{"location":"#contributors","text":"This project exists thanks to all the people who contribute.","title":"Contributors"},{"location":"#supporters","text":"Support the project by donating on Open Collective .","title":"Supporters"},{"location":"#backers","text":"Thank you to all our backers! Become a backer .","title":"Backers"},{"location":"#sponsors","text":"Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Become a sponsor .","title":"Sponsors"},{"location":"#special-thanks","text":"SmartHomeBeginner.com for creating AtoMiC-ToolKit that served as this project's primary inspiration, and later this guide that provided some initial direction with Docker. LinuxServer.io for maintaining the majority of the Docker images used in this project.","title":"Special Thanks"},{"location":"introduction/","text":"Introduction What DockSTARTer Is DockSTARTer is a script that installs Docker, Compose, and other dependencies for you. DockSTARTer comes with configurations to run various apps. DockSTARTer can be operated through a friendly GUI of terminal menus. DockSTARTer can be operated through commands for more advanced users who do not prefer the GUI. DockSTARTer is here to give you the freedom to choose what you want to run. DockSTARTer allows you to run apps that are not included using Overrides / Introduction . What DockSTARTer Is Not DockSTARTer is not a pre-made set of apps that run an exact way (you get to choose what to run and how to run it). DockSTARTer does not configure apps for you (think of it more like installing apps as a service, settings inside the app are still up to you, although our documentation will have recommendations). DockSTARTer does not configure storage for you (you may use local storage, or cloud storage, multiple disks, raid, etc). System Requirements Supported Operating Systems You must be running a Supported Platform or an operating system based on a supported platform. Platforms named below will link to documentation listing compatible versions. CentOS Debian Fedora Ubuntu Any operating system based on one of the above (ex: Raspbian) should also work as long as you can install the officially supported script . DockSTARTer will attempt to perform this install for you if possible. Supported Hardware Any x86_64 , armv7l , or aarch64 system should be able to run one of the supported operating systems listed above. ARM CPUs may have a limited selection of supported containers. Windows Support Currently we recommend installing one of the supported platforms above in a VM. In the future we may be able to support the Windows Subsystem for Linux version 2. Videos Getting Started Version Control Visualization","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#what-dockstarter-is","text":"DockSTARTer is a script that installs Docker, Compose, and other dependencies for you. DockSTARTer comes with configurations to run various apps. DockSTARTer can be operated through a friendly GUI of terminal menus. DockSTARTer can be operated through commands for more advanced users who do not prefer the GUI. DockSTARTer is here to give you the freedom to choose what you want to run. DockSTARTer allows you to run apps that are not included using Overrides / Introduction .","title":"What DockSTARTer Is"},{"location":"introduction/#what-dockstarter-is-not","text":"DockSTARTer is not a pre-made set of apps that run an exact way (you get to choose what to run and how to run it). DockSTARTer does not configure apps for you (think of it more like installing apps as a service, settings inside the app are still up to you, although our documentation will have recommendations). DockSTARTer does not configure storage for you (you may use local storage, or cloud storage, multiple disks, raid, etc).","title":"What DockSTARTer Is Not"},{"location":"introduction/#system-requirements","text":"","title":"System Requirements"},{"location":"introduction/#supported-operating-systems","text":"You must be running a Supported Platform or an operating system based on a supported platform. Platforms named below will link to documentation listing compatible versions. CentOS Debian Fedora Ubuntu Any operating system based on one of the above (ex: Raspbian) should also work as long as you can install the officially supported script . DockSTARTer will attempt to perform this install for you if possible.","title":"Supported Operating Systems"},{"location":"introduction/#supported-hardware","text":"Any x86_64 , armv7l , or aarch64 system should be able to run one of the supported operating systems listed above. ARM CPUs may have a limited selection of supported containers.","title":"Supported Hardware"},{"location":"introduction/#windows-support","text":"Currently we recommend installing one of the supported platforms above in a VM. In the future we may be able to support the Windows Subsystem for Linux version 2.","title":"Windows Support"},{"location":"introduction/#videos","text":"Getting Started Version Control Visualization","title":"Videos"},{"location":"advanced/backups/","text":"Backups THIS IS DEPRECATED AND REMOVED FROM DOCKSTARTER AS OF 01/01/2020 Creating backups DockSTARTer menu has an option for Backup Config , or you can use one of sudo ds -b min / sudo ds -b med / sudo ds -b max to create backups. Min: Backs up your .env file Med: Backs up your .env file and the config folder for any enabled app Max: Backs up your .env file and any config folder found in your DOCKERCONFDIR. Apps will be stopped before running a backup and started after completing a backup. Med and Max also support pre/post commands in between each app (so you could disable uptime monitors for example) Min, Med, and Max support pre/post commands for the entire run. These commands can be set in .env Scheduling backups It is recommended to setup a cron job using sudo crontab -e and adding a line like 0 2 * * * /home/<USER>/.docker/main.sh -b min or 0 2 * * * /home/<USER>/.docker/main.sh -b med or 0 2 * * * /home/<USER>/.docker/main.sh -b max Which would make a daily backup at 2 AM. Backup retention The snapshot backup is created into ${BACKUP_CONFDIR}/<appname>.001 . If the folder <appname>.001 exists already it is rotated to <appname>.002 and so on, up to <appname>.512 by default (this can be adjusted), thereafter it is removed. So if you create one backup per night, for example with a cronjob, then this retention policy gives you 512 days of retention. This is useful but this can require to much disk space, that is why we have included a non-linear distribution policy. In short, we keep only the oldest backup in the range 257-512, and also in the range 129-256, and so on. This exponential distribution in time of the backups retains more backups in the short term and less in the long term; it keeps only 10 or 11 backups but spans a retention of 257-512 days. In the following table you can see on each column the different steps of the rotation, where each column shows the current set of snapshots (limited from <appname>.1 to <appname>.16 in this example): 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 16 To save more disk space, rsync will make hard links for each file of <appname>.001 that already existed in <appname>.002 with identical content, timestamps and ownerships. Deleting backups Backups created by DockSTARTer will be protected with a special attribute called immutable that makes the backups read only to all users including root. This is done to protect your backups from accidental deletion. Backups will be rotated through retention as described above because the backup script handles the immutable attribute. If you need to delete a backup manually you will first need to remove the immutable attribute from the folder using sudo chattr -R -i /path/to/backup/<appname>.### Credits The backup function is strongly borrowed from http://www.pointsoftware.ch/en/howto-local-and-remote-snapshot-backup-using-rsync-with-hard-links/ which has sections explaining how the rsync process works, including information about hard links (backups don't take up as much space as you think!)","title":"Backups"},{"location":"advanced/backups/#backups","text":"","title":"Backups"},{"location":"advanced/backups/#this-is-deprecated-and-removed-from-dockstarter-as-of-01012020","text":"","title":"THIS IS DEPRECATED AND REMOVED FROM DOCKSTARTER AS OF 01/01/2020"},{"location":"advanced/backups/#creating-backups","text":"DockSTARTer menu has an option for Backup Config , or you can use one of sudo ds -b min / sudo ds -b med / sudo ds -b max to create backups. Min: Backs up your .env file Med: Backs up your .env file and the config folder for any enabled app Max: Backs up your .env file and any config folder found in your DOCKERCONFDIR. Apps will be stopped before running a backup and started after completing a backup. Med and Max also support pre/post commands in between each app (so you could disable uptime monitors for example) Min, Med, and Max support pre/post commands for the entire run. These commands can be set in .env","title":"Creating backups"},{"location":"advanced/backups/#scheduling-backups","text":"It is recommended to setup a cron job using sudo crontab -e and adding a line like 0 2 * * * /home/<USER>/.docker/main.sh -b min or 0 2 * * * /home/<USER>/.docker/main.sh -b med or 0 2 * * * /home/<USER>/.docker/main.sh -b max Which would make a daily backup at 2 AM.","title":"Scheduling backups"},{"location":"advanced/backups/#backup-retention","text":"The snapshot backup is created into ${BACKUP_CONFDIR}/<appname>.001 . If the folder <appname>.001 exists already it is rotated to <appname>.002 and so on, up to <appname>.512 by default (this can be adjusted), thereafter it is removed. So if you create one backup per night, for example with a cronjob, then this retention policy gives you 512 days of retention. This is useful but this can require to much disk space, that is why we have included a non-linear distribution policy. In short, we keep only the oldest backup in the range 257-512, and also in the range 129-256, and so on. This exponential distribution in time of the backups retains more backups in the short term and less in the long term; it keeps only 10 or 11 backups but spans a retention of 257-512 days. In the following table you can see on each column the different steps of the rotation, where each column shows the current set of snapshots (limited from <appname>.1 to <appname>.16 in this example): 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 16 To save more disk space, rsync will make hard links for each file of <appname>.001 that already existed in <appname>.002 with identical content, timestamps and ownerships.","title":"Backup retention"},{"location":"advanced/backups/#deleting-backups","text":"Backups created by DockSTARTer will be protected with a special attribute called immutable that makes the backups read only to all users including root. This is done to protect your backups from accidental deletion. Backups will be rotated through retention as described above because the backup script handles the immutable attribute. If you need to delete a backup manually you will first need to remove the immutable attribute from the folder using sudo chattr -R -i /path/to/backup/<appname>.###","title":"Deleting backups"},{"location":"advanced/backups/#credits","text":"The backup function is strongly borrowed from http://www.pointsoftware.ch/en/howto-local-and-remote-snapshot-backup-using-rsync-with-hard-links/ which has sections explaining how the rsync process works, including information about hard links (backups don't take up as much space as you think!)","title":"Credits"},{"location":"advanced/domain-info/","text":"Domain Info Using ddclient with DDNS and Google Domains (and others) Info to come.","title":"Domain Info"},{"location":"advanced/domain-info/#domain-info","text":"","title":"Domain Info"},{"location":"advanced/domain-info/#using-ddclient-with-ddns-and-google-domains-and-others","text":"Info to come.","title":"Using ddclient with DDNS and Google Domains (and others)"},{"location":"advanced/macvlan/","text":"Macvlan Networking It may help to read the official documentation on Macvlan networks, as well as this tutorial which this page is based on. Motivation There are a few different types of Docker networks. DockSTARTer by default uses a 'bridge' network, which is a virtual network that provides isolation from other networks, but allows containers to communicate with each other. However, some applications require access to the physical network. Both Home Assistant and Plex need physical network access for discovery (the former will have issues communicating with IoT devices otherwise). One solution might be to use Docker's host network. This however, increases the odds of port conflicts as more containers are added. Docker introduced a Macvlan network for this case which assigns a unique IP and MAC address for attached containers. Setup On Your Router Take note of the IP address of your Docker host and create a DHCP reservation for the IP if there isn't one already. Configure DHCP so it will not assign address in a given range. That range will be occupied by our container's addresses. The rest of this tutorial assumes addresses above X.X.X.190 will be free. On Your Docker Host Create the macvlan network (see Note 1): docker network create -d macvlan -o parent = <myinterface> --subnet X.X.X.0/24 --gateway X.X.X.1 --ip-range X.X.X.192/27 --aux-address 'host=X.X.X.Y' mymacvlan <myinterface> is the network interface your device is receiving data from. Run ifconfig for a listing of possible -nterfaces. Ex: eth0 subnet and gateway are specific to your LAN subnet ip-range is the range in which Docker will assign IP addresses. This example goes from X.X.X.192 to X.X.X.223 X.X.X.Y following host should be the IP address of your Docker host. Add the following to /etc/network/interfaces after replacing information as needed: # Create new macvlan interface on the host ip link add mymacvlanshim link myinterface type macvlan mode bridge # Add the host address and bring up the interface ip addr add X.X.X.Y/32 dev mymacvlanshim ip link set mymacvlanshim up # Tell our host to use that interface to communicate with containers ip route add 192 .168.86.192/27 dev mymacvlanshim Reboot Note 1 You may be wondering why we don't create the network in Docker compose. Newer versions of compose have issues with using aux-address and ip-range . In Your DockSTARTer Overrides We could connect our containers to mymacvlan and call it a day, but it's very useful to reserve IPs for each container so we can reach web endpoints in a consistent way. Add something similar to this to your docker-compose.override.yml file for each container: services : ouroboros : networks : composemacvlan : ipv4_address : X.X.X.201 networks : composemacvlan : external : name : mymacvlan version : \"3.4\" The ipv4 address should fall in the range you reserved. Unfortunately, it's necessary to do this when adding new containers if you want them on the same network. After this, you should be able to compose ( sudo ds -c ) and have a new shiny macvlan network! The containers will be available at the addresses you specified.","title":"Macvlan Networking"},{"location":"advanced/macvlan/#macvlan-networking","text":"It may help to read the official documentation on Macvlan networks, as well as this tutorial which this page is based on.","title":"Macvlan Networking"},{"location":"advanced/macvlan/#motivation","text":"There are a few different types of Docker networks. DockSTARTer by default uses a 'bridge' network, which is a virtual network that provides isolation from other networks, but allows containers to communicate with each other. However, some applications require access to the physical network. Both Home Assistant and Plex need physical network access for discovery (the former will have issues communicating with IoT devices otherwise). One solution might be to use Docker's host network. This however, increases the odds of port conflicts as more containers are added. Docker introduced a Macvlan network for this case which assigns a unique IP and MAC address for attached containers.","title":"Motivation"},{"location":"advanced/macvlan/#setup","text":"","title":"Setup"},{"location":"advanced/macvlan/#on-your-router","text":"Take note of the IP address of your Docker host and create a DHCP reservation for the IP if there isn't one already. Configure DHCP so it will not assign address in a given range. That range will be occupied by our container's addresses. The rest of this tutorial assumes addresses above X.X.X.190 will be free.","title":"On Your Router"},{"location":"advanced/macvlan/#on-your-docker-host","text":"Create the macvlan network (see Note 1): docker network create -d macvlan -o parent = <myinterface> --subnet X.X.X.0/24 --gateway X.X.X.1 --ip-range X.X.X.192/27 --aux-address 'host=X.X.X.Y' mymacvlan <myinterface> is the network interface your device is receiving data from. Run ifconfig for a listing of possible -nterfaces. Ex: eth0 subnet and gateway are specific to your LAN subnet ip-range is the range in which Docker will assign IP addresses. This example goes from X.X.X.192 to X.X.X.223 X.X.X.Y following host should be the IP address of your Docker host. Add the following to /etc/network/interfaces after replacing information as needed: # Create new macvlan interface on the host ip link add mymacvlanshim link myinterface type macvlan mode bridge # Add the host address and bring up the interface ip addr add X.X.X.Y/32 dev mymacvlanshim ip link set mymacvlanshim up # Tell our host to use that interface to communicate with containers ip route add 192 .168.86.192/27 dev mymacvlanshim Reboot Note 1 You may be wondering why we don't create the network in Docker compose. Newer versions of compose have issues with using aux-address and ip-range .","title":"On Your Docker Host"},{"location":"advanced/macvlan/#in-your-dockstarter-overrides","text":"We could connect our containers to mymacvlan and call it a day, but it's very useful to reserve IPs for each container so we can reach web endpoints in a consistent way. Add something similar to this to your docker-compose.override.yml file for each container: services : ouroboros : networks : composemacvlan : ipv4_address : X.X.X.201 networks : composemacvlan : external : name : mymacvlan version : \"3.4\" The ipv4 address should fall in the range you reserved. Unfortunately, it's necessary to do this when adding new containers if you want them on the same network. After this, you should be able to compose ( sudo ds -c ) and have a new shiny macvlan network! The containers will be available at the addresses you specified.","title":"In Your DockSTARTer Overrides"},{"location":"advanced/openmediavault/","text":"OpenMediaVault (OMV) OpenMediaVault (OMV) requires some special setup in order to install DockSTARTer (DS). DS staff have tested and confirmed the following installation method on OMV version 5.5. If you are a Linux newbie, we strongly discourage this approach because of all the issues that might arise with how OMV is built, and troubleshooting issues in OMV can be a pain. However, if you feel comfortable with Linux and want to continue down this route you will need to ensure the following: You have installed all the necessary updates that are pending in your system. You have set a DNS server in your Web GUI. You have created a user with a home directory outside of the system disk that has sudo and ssh permissions. See below in how to do that. You have a secondary disk other than the system drive mounted and formatted to anything other than NTFS. We recommend you set up a specific \"Shared Folder\" for your home directory. appdata directory should only be used to store container configurations, not home directories. SSH to your host as root. You will need to edit a system config file in order to avoid issues in the future. Run the following command (you can use your favorite text editor for this portion): nano /etc/openmediavault/config.xml We are looking for the following line: <opts>defaults,nofail,user_xattr,noexec,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl... The part you care about is the noexec bit. You will need to remove that string. Save the file and per OMV documentation you need to run omv-salt deploy run fstab . To verify that the noexec flag was removed from your drive run cat /proc/mounts and find your drive on the list. You can also run cat /proc/mounts | grep partial_drive_name . If the noexec flag is present, you skipped a step. We are now going to work on creating the directories for DS to use. You will need to create 4 shared folders and allow \"Everyone read/write\". The 4 directories will be called appdata , storage , medialibrary and home . The last directory should be where you store your user directories and you should not be using the system disk for that. If you do not know how to create a user and assign it a home directory; look up the OMV documentation as that is outside of the scope of this guide. Once the above requirements have been met, you will need to SSH to your OMV host using the account you created. First make sure your home directory was set up correctly by typing cd ~ . This shouldn't return an error, if it does read over the OMV documentation in how to properly create a user with a home directory. If no error occurs, run the following commands: sudo apt-get install curl git bash -c \"$(curl -fsSL https://get.dockstarter.com)\" sudo reboot After the reboot is complete, SSH back to your host using your user account and run ds , type your password and select \"Configuration\". Select \"Set Global Variables\" and select \"No\" on the next prompt. The only thing we recommend changing is the PGID to Use System 100 . On the next screen, please take note of the path that starts with /srv/dev-disk-by-label-XXX . You are going to want to remember this path to set your appdata , storage , media and downloads folder to that path, for instance: /srv/dev-disk-by-label-DS/appdata/ , /srv/dev-disk-by-label-DS/media/movies , etc.","title":"OpenMediaVault (OMV)"},{"location":"advanced/openmediavault/#openmediavault-omv","text":"OpenMediaVault (OMV) requires some special setup in order to install DockSTARTer (DS). DS staff have tested and confirmed the following installation method on OMV version 5.5. If you are a Linux newbie, we strongly discourage this approach because of all the issues that might arise with how OMV is built, and troubleshooting issues in OMV can be a pain. However, if you feel comfortable with Linux and want to continue down this route you will need to ensure the following: You have installed all the necessary updates that are pending in your system. You have set a DNS server in your Web GUI. You have created a user with a home directory outside of the system disk that has sudo and ssh permissions. See below in how to do that. You have a secondary disk other than the system drive mounted and formatted to anything other than NTFS. We recommend you set up a specific \"Shared Folder\" for your home directory. appdata directory should only be used to store container configurations, not home directories. SSH to your host as root. You will need to edit a system config file in order to avoid issues in the future. Run the following command (you can use your favorite text editor for this portion): nano /etc/openmediavault/config.xml We are looking for the following line: <opts>defaults,nofail,user_xattr,noexec,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl... The part you care about is the noexec bit. You will need to remove that string. Save the file and per OMV documentation you need to run omv-salt deploy run fstab . To verify that the noexec flag was removed from your drive run cat /proc/mounts and find your drive on the list. You can also run cat /proc/mounts | grep partial_drive_name . If the noexec flag is present, you skipped a step. We are now going to work on creating the directories for DS to use. You will need to create 4 shared folders and allow \"Everyone read/write\". The 4 directories will be called appdata , storage , medialibrary and home . The last directory should be where you store your user directories and you should not be using the system disk for that. If you do not know how to create a user and assign it a home directory; look up the OMV documentation as that is outside of the scope of this guide. Once the above requirements have been met, you will need to SSH to your OMV host using the account you created. First make sure your home directory was set up correctly by typing cd ~ . This shouldn't return an error, if it does read over the OMV documentation in how to properly create a user with a home directory. If no error occurs, run the following commands: sudo apt-get install curl git bash -c \"$(curl -fsSL https://get.dockstarter.com)\" sudo reboot After the reboot is complete, SSH back to your host using your user account and run ds , type your password and select \"Configuration\". Select \"Set Global Variables\" and select \"No\" on the next prompt. The only thing we recommend changing is the PGID to Use System 100 . On the next screen, please take note of the path that starts with /srv/dev-disk-by-label-XXX . You are going to want to remember this path to set your appdata , storage , media and downloads folder to that path, for instance: /srv/dev-disk-by-label-DS/appdata/ , /srv/dev-disk-by-label-DS/media/movies , etc.","title":"OpenMediaVault (OMV)"},{"location":"advanced/smb-mounting/","text":"SMB Mounting Linux Host Create a file called .credentials or the like in your home folder. In this folder, you're going to put this: username=<username to access resource> password=<password to access resource> substitute your own variables of course. From here, you're going to want to install cifs-utils: sudo apt-get install cifs-utils Then once that's done, you should be able to mount your SMB/Windows Share like so: sudo mount -t cifs //<host>/Downloads /mnt/downloads -o uid = 1000 ,gid = 1000 ,credentials = /home/<your home user>/.credentials,rw,vers = 3 .0 And to make sure that sticks, you're going to put this entry in your /etc/fstab file (You'll probably want to put it at the bottom) to match: //<host>/Downloads /mnt/downloads cifs uid=1000,gid=1000,credentials=/home/<your home user>/.credentials,rw,vers=3.0 You should be able to reboot to test the mount, but you should now be able to ls -al /mnt/Downloads (in my example) and see the files in your Shared Downloads folder! OpLock issues If you have containers that lock the drive and fail to unlock, you can deny the granting of opportunistic locks by setting the following registry entry: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\mrxsmb HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\mrxsmb20 EnableOplocks REG_DWORD 0 Windows Host net use Z: \\\\host\\Downloads","title":"SMB Mounting"},{"location":"advanced/smb-mounting/#smb-mounting","text":"","title":"SMB Mounting"},{"location":"advanced/smb-mounting/#linux-host","text":"Create a file called .credentials or the like in your home folder. In this folder, you're going to put this: username=<username to access resource> password=<password to access resource> substitute your own variables of course. From here, you're going to want to install cifs-utils: sudo apt-get install cifs-utils Then once that's done, you should be able to mount your SMB/Windows Share like so: sudo mount -t cifs //<host>/Downloads /mnt/downloads -o uid = 1000 ,gid = 1000 ,credentials = /home/<your home user>/.credentials,rw,vers = 3 .0 And to make sure that sticks, you're going to put this entry in your /etc/fstab file (You'll probably want to put it at the bottom) to match: //<host>/Downloads /mnt/downloads cifs uid=1000,gid=1000,credentials=/home/<your home user>/.credentials,rw,vers=3.0 You should be able to reboot to test the mount, but you should now be able to ls -al /mnt/Downloads (in my example) and see the files in your Shared Downloads folder!","title":"Linux Host"},{"location":"advanced/smb-mounting/#oplock-issues","text":"If you have containers that lock the drive and fail to unlock, you can deny the granting of opportunistic locks by setting the following registry entry: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\mrxsmb HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\mrxsmb20 EnableOplocks REG_DWORD 0","title":"OpLock issues"},{"location":"advanced/smb-mounting/#windows-host","text":"net use Z: \\\\host\\Downloads","title":"Windows Host"},{"location":"advanced/technical-info/","text":"Technical Info How Does DockSTARTer Work DockSTARTer works by generating the configuration that Compose uses. A linux \"pro\" might use Compose to do what DockSTARTer does themselves but it would still take a lot longer. Compose is a tool for defining and running multi-container Docker applications. To learn more about Compose refer to the following documentation . Compose works by reading YAML (*.yml) configuration files with the paths, ports and parameters each Container should run with. YML Files DO NOT EDIT THESE FILES DIRECTLY. Overriding these settings is easy but you must create a new file first. See the Overrides / Introduction page. YML files are akin to XML files and below is an example: version : \"3.6\" services : sonarr : image : containers_author/sonarr container_name : sonarr restart : unless-stopped environment : - PGID=${PGID} - PUID=${PUID} - TZ=${TZ} volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/sonarr:/config - ${DOCKERSTORAGEDIR}:/storage In the example above, image is the Container that you're using but also the quasi URL Docker will attempt to pull it from. container_name is the human readable name Docker will use to describe it. Volumes During the Getting Started section, you set volumes for your configuration, download and media etc in the GLOBAL section. The path to Sonarr's config in the above example, broken up, is ${DOCKERCONFDIR}/sonarr then the deliminator : followed by /config ${DOCKERCONFDIR}/sonarr is the path on your computer that Sonarr will see when it looks in /config . In this way, all your Containers will have their own private folder in your global config mount. The ${DOCKERSTORAGEDIR} location is public to all apps that need it. That means Sonarr will be writing and reading from the same ${DOCKERSTORAGEDIR}:/storage mounts as Radarr, SickBeard etc AND your download clients. Again , do not edit the default YML files, instead, see the section on Overrides / Introduction . (Assuming you are reading this page from start to finish for the first time) there is a reason you haven't seen their location yet ;) Ports The ports for access to (and from) your apps are manipulated in your .env settings. I use the Sonarr example a lot but if you're not familiar, it's default port is 8989 . SONARR_PORT_8989=6969 If you were to edit the .env for sonarr to the above, and run the generator again, you would then access Sonarr at http://app.address:6969/calendar instead of the default port, 8989. Do not change your apps internal ports unless you know what you are doing. For instance, if you change Sonarr's internal port to 4545, it will still listen on 8989 by default. So then, you won't be able to access the WebGUI and without that, I don't even know where to begin changing the port in Sonarr's config files. And unless you want to run Transmission and RuTorrent side by side, I can't think of a good reason to change them in .env either.","title":"Technical Info"},{"location":"advanced/technical-info/#technical-info","text":"","title":"Technical Info"},{"location":"advanced/technical-info/#how-does-dockstarter-work","text":"DockSTARTer works by generating the configuration that Compose uses. A linux \"pro\" might use Compose to do what DockSTARTer does themselves but it would still take a lot longer. Compose is a tool for defining and running multi-container Docker applications. To learn more about Compose refer to the following documentation . Compose works by reading YAML (*.yml) configuration files with the paths, ports and parameters each Container should run with.","title":"How Does DockSTARTer Work"},{"location":"advanced/technical-info/#yml-files","text":"DO NOT EDIT THESE FILES DIRECTLY. Overriding these settings is easy but you must create a new file first. See the Overrides / Introduction page. YML files are akin to XML files and below is an example: version : \"3.6\" services : sonarr : image : containers_author/sonarr container_name : sonarr restart : unless-stopped environment : - PGID=${PGID} - PUID=${PUID} - TZ=${TZ} volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/sonarr:/config - ${DOCKERSTORAGEDIR}:/storage In the example above, image is the Container that you're using but also the quasi URL Docker will attempt to pull it from. container_name is the human readable name Docker will use to describe it.","title":"YML Files"},{"location":"advanced/technical-info/#volumes","text":"During the Getting Started section, you set volumes for your configuration, download and media etc in the GLOBAL section. The path to Sonarr's config in the above example, broken up, is ${DOCKERCONFDIR}/sonarr then the deliminator : followed by /config ${DOCKERCONFDIR}/sonarr is the path on your computer that Sonarr will see when it looks in /config . In this way, all your Containers will have their own private folder in your global config mount. The ${DOCKERSTORAGEDIR} location is public to all apps that need it. That means Sonarr will be writing and reading from the same ${DOCKERSTORAGEDIR}:/storage mounts as Radarr, SickBeard etc AND your download clients. Again , do not edit the default YML files, instead, see the section on Overrides / Introduction . (Assuming you are reading this page from start to finish for the first time) there is a reason you haven't seen their location yet ;)","title":"Volumes"},{"location":"advanced/technical-info/#ports","text":"The ports for access to (and from) your apps are manipulated in your .env settings. I use the Sonarr example a lot but if you're not familiar, it's default port is 8989 . SONARR_PORT_8989=6969 If you were to edit the .env for sonarr to the above, and run the generator again, you would then access Sonarr at http://app.address:6969/calendar instead of the default port, 8989. Do not change your apps internal ports unless you know what you are doing. For instance, if you change Sonarr's internal port to 4545, it will still listen on 8989 by default. So then, you won't be able to access the WebGUI and without that, I don't even know where to begin changing the port in Sonarr's config files. And unless you want to run Transmission and RuTorrent side by side, I can't think of a good reason to change them in .env either.","title":"Ports"},{"location":"advanced/uninstall/","text":"Uninstalling Blurb from our Discord follows: ... you can remove everything in ~/.docker with exception to ~/.docker/config (which you may not have if your config is at ~/.config/appdata ). However, you may want to consider keeping the ~/.docker/compose/docker-compose.yml and ~/.docker/compose/.env to rebuild it using sudo docker-compose and pass the envs. ... you should see your containers in docker ps -a or GUI such as Portainer. DS installs everything by running docker compose the way docker recommends, so all DS is really doing is merging a compose file together for you. Once you have the compose file you can remove DS if you like. Also DS itself doesn't do anything on its own, so you could just leave it in place. Keep up with your .env file and your config folder and everything can be done using the official compose commands. Just save any configurations you decide you need to keep, and delete the ~/.docker folder. DockSTARTer installs docker using get.docker.com so you can read through that to undo it if you decide you need to. Compose is run via a docker container, so there's nothing to uninstall. Note: The above has been updated and modified with more recent info.","title":"Uninstalling"},{"location":"advanced/uninstall/#uninstalling","text":"Blurb from our Discord follows: ... you can remove everything in ~/.docker with exception to ~/.docker/config (which you may not have if your config is at ~/.config/appdata ). However, you may want to consider keeping the ~/.docker/compose/docker-compose.yml and ~/.docker/compose/.env to rebuild it using sudo docker-compose and pass the envs. ... you should see your containers in docker ps -a or GUI such as Portainer. DS installs everything by running docker compose the way docker recommends, so all DS is really doing is merging a compose file together for you. Once you have the compose file you can remove DS if you like. Also DS itself doesn't do anything on its own, so you could just leave it in place. Keep up with your .env file and your config folder and everything can be done using the official compose commands. Just save any configurations you decide you need to keep, and delete the ~/.docker folder. DockSTARTer installs docker using get.docker.com so you can read through that to undo it if you decide you need to. Compose is run via a docker container, so there's nothing to uninstall. Note: The above has been updated and modified with more recent info.","title":"Uninstalling"},{"location":"advanced/vpn-info/","text":"VPN Info VPN Services available to use through DockSTARTer VPN use is only available where we have found a easily configured container that runs as its own self contained unit. DelugeVPN qBittorrentVPN rTorrentVPN SABnzbdVPN TransmissionVPN VPN tun driver The VPN containers require an adjustment to your host system: echo \"iptable_mangle\" | sudo tee /etc/modules-load.d/iptable_mangle.conf echo \"tun\" | sudo tee /etc/modules-load.d/tun.conf sudo reboot Access VPN containers remotely If you're attempting to access the Web UI for one of your VPN containers (e.g. TransmissionVPN, DelugeVPN, etc.) from outside of your home network using SWAG , you will need to modify the SWAG configuration file to support the name difference. The sample configs are controlled by LSIO , not by DockSTARTer. So this change is required to get the VPN containers running remotely. The sample proxy configuration files found in ~/.config/appdata/swag/nginx/proxy-confs/ will need to be modified and as usual, have the .sample removed from the filename. You will also need to edit the appropriate proxy .conf . The below example uses the TransmissionVPN container as an example: Enter either sudo nano transmission.subfolder.conf or sudo nano transmission.subdomain.conf depending on your configuration desires and change the below line: Original set $upstream_app transmission ; Modified set $upstream_app transmissionvpn ; Save the file out and then restart your containers with a ds -c command. How to check if the VPN is working https://torguard.net/checkmytorrentipaddress.php http://www.doileak.com/ http://ipmagnet.services.cbcdn.com/ http://test.torrentprivacy.com/ Use a VPN for everything If you require VPN on all connections it is recommended to install OpenVPN as you normally would ( in /etc/openvpn etc etc) and then have the Docker service started and stopped by the up / down scripts. You can disable auto starting of the containers by disabling the docker service. An example provided by a user in our community for Ubuntu: sudo systemctl disable docker vpnup.sh #!/bin/bash if [[ -L \"/sbin/init\" ]] ; then systemctl start docker else /etc/init.d/docker start fi vpndown.sh #!/bin/bash if [[ -L \"/sbin/init\" ]] ; then systemctl stop docker else /etc/init.d/docker stop fi If you make changes to your .env file you will need to run ds -c . If you stop the OpenVPN service, thereby stopping Docker, DockSTARTER might fail. Start your OpenVPN service and run ds -c again if it didn't work. PIA with Transmission For PIA VPN Configuration: These pages come in handy - https://github.com/haugene/docker-transmission-openvpn/blob/master/README.md#network-configuration-options If you run into slow VPN issues, it may be the container is using a default .ovpn config. So you'd use something like this with Overrides / Introduction : OPENVPN_CONFIG=UK Southampton depending on your region/location.","title":"VPN Info"},{"location":"advanced/vpn-info/#vpn-info","text":"","title":"VPN Info"},{"location":"advanced/vpn-info/#vpn-services-available-to-use-through-dockstarter","text":"VPN use is only available where we have found a easily configured container that runs as its own self contained unit. DelugeVPN qBittorrentVPN rTorrentVPN SABnzbdVPN TransmissionVPN","title":"VPN Services available to use through DockSTARTer"},{"location":"advanced/vpn-info/#vpn-tun-driver","text":"The VPN containers require an adjustment to your host system: echo \"iptable_mangle\" | sudo tee /etc/modules-load.d/iptable_mangle.conf echo \"tun\" | sudo tee /etc/modules-load.d/tun.conf sudo reboot","title":"VPN tun driver"},{"location":"advanced/vpn-info/#access-vpn-containers-remotely","text":"If you're attempting to access the Web UI for one of your VPN containers (e.g. TransmissionVPN, DelugeVPN, etc.) from outside of your home network using SWAG , you will need to modify the SWAG configuration file to support the name difference. The sample configs are controlled by LSIO , not by DockSTARTer. So this change is required to get the VPN containers running remotely. The sample proxy configuration files found in ~/.config/appdata/swag/nginx/proxy-confs/ will need to be modified and as usual, have the .sample removed from the filename. You will also need to edit the appropriate proxy .conf . The below example uses the TransmissionVPN container as an example: Enter either sudo nano transmission.subfolder.conf or sudo nano transmission.subdomain.conf depending on your configuration desires and change the below line: Original set $upstream_app transmission ; Modified set $upstream_app transmissionvpn ; Save the file out and then restart your containers with a ds -c command.","title":"Access VPN containers remotely"},{"location":"advanced/vpn-info/#how-to-check-if-the-vpn-is-working","text":"https://torguard.net/checkmytorrentipaddress.php http://www.doileak.com/ http://ipmagnet.services.cbcdn.com/ http://test.torrentprivacy.com/","title":"How to check if the VPN is working"},{"location":"advanced/vpn-info/#use-a-vpn-for-everything","text":"If you require VPN on all connections it is recommended to install OpenVPN as you normally would ( in /etc/openvpn etc etc) and then have the Docker service started and stopped by the up / down scripts. You can disable auto starting of the containers by disabling the docker service. An example provided by a user in our community for Ubuntu: sudo systemctl disable docker vpnup.sh #!/bin/bash if [[ -L \"/sbin/init\" ]] ; then systemctl start docker else /etc/init.d/docker start fi vpndown.sh #!/bin/bash if [[ -L \"/sbin/init\" ]] ; then systemctl stop docker else /etc/init.d/docker stop fi If you make changes to your .env file you will need to run ds -c . If you stop the OpenVPN service, thereby stopping Docker, DockSTARTER might fail. Start your OpenVPN service and run ds -c again if it didn't work.","title":"Use a VPN for everything"},{"location":"advanced/vpn-info/#pia-with-transmission","text":"For PIA VPN Configuration: These pages come in handy - https://github.com/haugene/docker-transmission-openvpn/blob/master/README.md#network-configuration-options If you run into slow VPN issues, it may be the container is using a default .ovpn config. So you'd use something like this with Overrides / Introduction : OPENVPN_CONFIG=UK Southampton depending on your region/location.","title":"PIA with Transmission"},{"location":"apps/airdcpp/","text":"AirDC++ Description AirDC++ is an easy to use client for Advanced Direct Connect and Direct Connect networks. You are able to join \"hubs\" with other users, and chat, perform searches and browse the share of each user. Install/Setup If you see the following error: No valid configuration found. Run the application with --configure parameter to set up initial configuration. Run the following commands to correct: docker stop airdcpp docker run --rm -it --volumes-from airdcpp gangefors/airdcpp-webclient --add-user You will be prompted to create a user and password, then run: docker start airdcpp","title":"AirDC++"},{"location":"apps/airdcpp/#airdc","text":"","title":"AirDC++"},{"location":"apps/airdcpp/#description","text":"AirDC++ is an easy to use client for Advanced Direct Connect and Direct Connect networks. You are able to join \"hubs\" with other users, and chat, perform searches and browse the share of each user.","title":"Description"},{"location":"apps/airdcpp/#installsetup","text":"If you see the following error: No valid configuration found. Run the application with --configure parameter to set up initial configuration. Run the following commands to correct: docker stop airdcpp docker run --rm -it --volumes-from airdcpp gangefors/airdcpp-webclient --add-user You will be prompted to create a user and password, then run: docker start airdcpp","title":"Install/Setup"},{"location":"apps/airsonic/","text":"Airsonic Description Airsonic is a free, web-based media streamer, providing ubiquitous access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room.","title":"Airsonic"},{"location":"apps/airsonic/#airsonic","text":"","title":"Airsonic"},{"location":"apps/airsonic/#description","text":"Airsonic is a free, web-based media streamer, providing ubiquitous access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room.","title":"Description"},{"location":"apps/amd/","text":"AMD Description Automatic Music Downloader (AMD) is a Lidarr companion script to automatically download music for Lidarr.","title":"AMD"},{"location":"apps/amd/#amd","text":"","title":"AMD"},{"location":"apps/amd/#description","text":"Automatic Music Downloader (AMD) is a Lidarr companion script to automatically download music for Lidarr.","title":"Description"},{"location":"apps/apcupsd/","text":"Apcupsd Description Apcupsd is a dockerized Python script that will send data from apcupsd to influxdb. You can then visualize the influxdb data in Grafana / Prometheus . Install/Setup First you need to install apcupsd on your host. The command will vary depending on what Linux OS you are using. After you install apcupsd on your host, there are some changes that need to take place in your apcupsd.conf file. Again, the location of this file varies by OS, however, for Ubuntu based systems you can find this file in /etc/apcupsd/ . By default acpupsd it is set to listen on 127.0.0.1 . DockSTARTer (DS) does not run containers on host mode so your container will not be able to communicate with your apcupsd service. You need to open the apcupsd.conf file and search for NISIP . You need to change the IP address listed there to your local IP. Once you do this, you need to restart your apcupsd service so new settings take place. The docker image DS uses makes uses of NOMPOWER on your UPS. If your UPS does not have NOMPOWER , you will need to add an override to your existing DS installation and set a new environment variable called WATTS under environment which will need to equal the rated max power for your UPS, e.g: 1000 . To find whether your UPS has NOMPOWER or not, you can run apcaccess | grep \"NOMPOWER\" . Here is a great guide for exporting the influxdb data to Grafana. Just scroll down to the UPS Dashboard bit.","title":"Apcupsd"},{"location":"apps/apcupsd/#apcupsd","text":"","title":"Apcupsd"},{"location":"apps/apcupsd/#description","text":"Apcupsd is a dockerized Python script that will send data from apcupsd to influxdb. You can then visualize the influxdb data in Grafana / Prometheus .","title":"Description"},{"location":"apps/apcupsd/#installsetup","text":"First you need to install apcupsd on your host. The command will vary depending on what Linux OS you are using. After you install apcupsd on your host, there are some changes that need to take place in your apcupsd.conf file. Again, the location of this file varies by OS, however, for Ubuntu based systems you can find this file in /etc/apcupsd/ . By default acpupsd it is set to listen on 127.0.0.1 . DockSTARTer (DS) does not run containers on host mode so your container will not be able to communicate with your apcupsd service. You need to open the apcupsd.conf file and search for NISIP . You need to change the IP address listed there to your local IP. Once you do this, you need to restart your apcupsd service so new settings take place. The docker image DS uses makes uses of NOMPOWER on your UPS. If your UPS does not have NOMPOWER , you will need to add an override to your existing DS installation and set a new environment variable called WATTS under environment which will need to equal the rated max power for your UPS, e.g: 1000 . To find whether your UPS has NOMPOWER or not, you can run apcaccess | grep \"NOMPOWER\" . Here is a great guide for exporting the influxdb data to Grafana. Just scroll down to the UPS Dashboard bit.","title":"Install/Setup"},{"location":"apps/bazarr/","text":"Bazarr Description Bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you. Install/Setup By default, the DockSTARTer configuration of Bazarr will map to the following volumes: - ${DOCKERSTORAGEDIR}:/storage If you have any media outside of those locations, you'll need to create an override using override specifically for those volumes.","title":"Bazarr"},{"location":"apps/bazarr/#bazarr","text":"","title":"Bazarr"},{"location":"apps/bazarr/#description","text":"Bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you.","title":"Description"},{"location":"apps/bazarr/#installsetup","text":"By default, the DockSTARTer configuration of Bazarr will map to the following volumes: - ${DOCKERSTORAGEDIR}:/storage If you have any media outside of those locations, you'll need to create an override using override specifically for those volumes.","title":"Install/Setup"},{"location":"apps/beets/","text":"Beets Description Beets is a music library manager and not, for the most part, a music player. It does include a simple player plugin and an experimental Web-based player, but it generally leaves actual sound-reproduction to specialized tools.","title":"Beets"},{"location":"apps/beets/#beets","text":"","title":"Beets"},{"location":"apps/beets/#description","text":"Beets is a music library manager and not, for the most part, a music player. It does include a simple player plugin and an experimental Web-based player, but it generally leaves actual sound-reproduction to specialized tools.","title":"Description"},{"location":"apps/bitwarden/","text":"Bitwarden Description Bitwarden is a free and open-source password management service that stores sensitive information such as website credentials in an encrypted vault. This is a Bitwarden server API implementation written in Rust compatible with upstream Bitwarden clients , perfect for self-hosted deployment where running the official resource-heavy service might not be ideal. Install/Setup When installing the Bitwarden container, the installer will install under Appdata directory as the root user, however once it is installed you can change the owner/group of it to whatever is required Run the below command (from a terminal) to change the permissions if required. sudo chown -R owner:group ~/.config/appdata/bitwarden Having the owner group change will allow you to edit the files if required without running into permission issues.","title":"Bitwarden"},{"location":"apps/bitwarden/#bitwarden","text":"","title":"Bitwarden"},{"location":"apps/bitwarden/#description","text":"Bitwarden is a free and open-source password management service that stores sensitive information such as website credentials in an encrypted vault. This is a Bitwarden server API implementation written in Rust compatible with upstream Bitwarden clients , perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.","title":"Description"},{"location":"apps/bitwarden/#installsetup","text":"When installing the Bitwarden container, the installer will install under Appdata directory as the root user, however once it is installed you can change the owner/group of it to whatever is required Run the below command (from a terminal) to change the permissions if required. sudo chown -R owner:group ~/.config/appdata/bitwarden Having the owner group change will allow you to edit the files if required without running into permission issues.","title":"Install/Setup"},{"location":"apps/booksonic/","text":"Booksonic Description Booksonic is a server and an app for streaming your audiobooks to any pc or android phone. Most of the functionality is also available on other platforms that have apps for subsonic.","title":"Booksonic"},{"location":"apps/booksonic/#booksonic","text":"","title":"Booksonic"},{"location":"apps/booksonic/#description","text":"Booksonic is a server and an app for streaming your audiobooks to any pc or android phone. Most of the functionality is also available on other platforms that have apps for subsonic.","title":"Description"},{"location":"apps/bookstack/","text":"BookStack Description BookStack is a free and open source Wiki designed for creating beautiful documentation. Feauturing a simple, but powerful WYSIWYG editor it allows for teams to create detailed and useful documentation with ease.","title":"BookStack"},{"location":"apps/bookstack/#bookstack","text":"","title":"BookStack"},{"location":"apps/bookstack/#description","text":"BookStack is a free and open source Wiki designed for creating beautiful documentation. Feauturing a simple, but powerful WYSIWYG editor it allows for teams to create detailed and useful documentation with ease.","title":"Description"},{"location":"apps/calibre/","text":"Calibre Description Calibre is a powerful and easy to use e-book manager.","title":"Calibre"},{"location":"apps/calibre/#calibre","text":"","title":"Calibre"},{"location":"apps/calibre/#description","text":"Calibre is a powerful and easy to use e-book manager.","title":"Description"},{"location":"apps/calibreweb/","text":"Calibre-Web Description Calibre-web is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database. It is also possible to integrate google drive and edit metadata and your calibre library through the app itself. Install/Setup The Calibre-Web docker is only a web front end to the actual Calibre application/database itself. You still need a Calibre metadata.db file for Calibre Web to function. To get this, you have to install Calibre somewhere and you can move the metadata.db file into your /storage folder.","title":"Calibre-Web"},{"location":"apps/calibreweb/#calibre-web","text":"","title":"Calibre-Web"},{"location":"apps/calibreweb/#description","text":"Calibre-web is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database. It is also possible to integrate google drive and edit metadata and your calibre library through the app itself.","title":"Description"},{"location":"apps/calibreweb/#installsetup","text":"The Calibre-Web docker is only a web front end to the actual Calibre application/database itself. You still need a Calibre metadata.db file for Calibre Web to function. To get this, you have to install Calibre somewhere and you can move the metadata.db file into your /storage folder.","title":"Install/Setup"},{"location":"apps/cloudcmd/","text":"Cloud Commander Description Cloud Commander is a file manager for the web. It includes a command-line console and a text editor. Cloud Commander helps you manage your server and work with files, directories and programs in a web browser from any computer, mobile or tablet.","title":"Cloud Commander"},{"location":"apps/cloudcmd/#cloud-commander","text":"","title":"Cloud Commander"},{"location":"apps/cloudcmd/#description","text":"Cloud Commander is a file manager for the web. It includes a command-line console and a text editor. Cloud Commander helps you manage your server and work with files, directories and programs in a web browser from any computer, mobile or tablet.","title":"Description"},{"location":"apps/cloudflareddns/","text":"CloudFlare DDNS Description CloudFlareDDNS is a small Docker image that allows you to use the free CloudFlare DNS Service as a Dynamic DNS Provider ( DDNS ).","title":"CloudFlare DDNS"},{"location":"apps/cloudflareddns/#cloudflare-ddns","text":"","title":"CloudFlare DDNS"},{"location":"apps/cloudflareddns/#description","text":"CloudFlareDDNS is a small Docker image that allows you to use the free CloudFlare DNS Service as a Dynamic DNS Provider ( DDNS ).","title":"Description"},{"location":"apps/codeserver/","text":"Codeserver Description Run VS Code on any machine anywhere and access it in the browser.","title":"Codeserver"},{"location":"apps/codeserver/#codeserver","text":"","title":"Codeserver"},{"location":"apps/codeserver/#description","text":"Run VS Code on any machine anywhere and access it in the browser.","title":"Description"},{"location":"apps/couchpotato/","text":"CouchPotato Description CouchPotato is an automatic NZB and torrent downloader. You can keep a movies I Want list and it will search for NZBs/torrents of these movies every X hours. Once a movie is found, it will send it to SABnzbd or download the torrent to a specified directory.","title":"CouchPotato"},{"location":"apps/couchpotato/#couchpotato","text":"","title":"CouchPotato"},{"location":"apps/couchpotato/#description","text":"CouchPotato is an automatic NZB and torrent downloader. You can keep a movies I Want list and it will search for NZBs/torrents of these movies every X hours. Once a movie is found, it will send it to SABnzbd or download the torrent to a specified directory.","title":"Description"},{"location":"apps/dasshio/","text":"Dasshio Description Dasshio is a Hass.io add-on to easily use Amazon Dash Buttons with Home Assistant","title":"Dasshio"},{"location":"apps/dasshio/#dasshio","text":"","title":"Dasshio"},{"location":"apps/dasshio/#description","text":"Dasshio is a Hass.io add-on to easily use Amazon Dash Buttons with Home Assistant","title":"Description"},{"location":"apps/ddclient/","text":"Ddclient Description DDclient is a Perl client used to update dynamic DNS entries for accounts on a Dynamic DNS Network Service Provider. It was originally written by Paul Burry and is now mostly by wimpunk. It has the capability to update more than just dyndns and it can fetch your WAN-ipaddress in a few different ways. Install/Setup Edit the included config to uncomment this line: use = web, web=checkip.dyndns.org/, web-skip='IP Address' # found after IP Address Then find your service of choice in the file and fill out the info as described. CloudFlare is recommended.","title":"Ddclient"},{"location":"apps/ddclient/#ddclient","text":"","title":"Ddclient"},{"location":"apps/ddclient/#description","text":"DDclient is a Perl client used to update dynamic DNS entries for accounts on a Dynamic DNS Network Service Provider. It was originally written by Paul Burry and is now mostly by wimpunk. It has the capability to update more than just dyndns and it can fetch your WAN-ipaddress in a few different ways.","title":"Description"},{"location":"apps/ddclient/#installsetup","text":"Edit the included config to uncomment this line: use = web, web=checkip.dyndns.org/, web-skip='IP Address' # found after IP Address Then find your service of choice in the file and fill out the info as described. CloudFlare is recommended.","title":"Install/Setup"},{"location":"apps/deemix/","text":"Deemix Description Deemix is a deezer downloader built from the ashes of Deezloader Remix. The base library (or core) can be used as a stand alone CLI app or implemented in an UI using the API.","title":"Deemix"},{"location":"apps/deemix/#deemix","text":"","title":"Deemix"},{"location":"apps/deemix/#description","text":"Deemix is a deezer downloader built from the ashes of Deezloader Remix. The base library (or core) can be used as a stand alone CLI app or implemented in an UI using the API.","title":"Description"},{"location":"apps/deluge/","text":"Deluge Description Deluge is a lightweight, Free Software, cross-platform BitTorrent client.","title":"Deluge"},{"location":"apps/deluge/#deluge","text":"","title":"Deluge"},{"location":"apps/deluge/#description","text":"Deluge is a lightweight, Free Software, cross-platform BitTorrent client.","title":"Description"},{"location":"apps/delugevpn/","text":"DelugeVPN Description DelugeVPN is a Docker build script for Arch Linux base with Deluge , Privoxy and OpenVPN all included in one image. The support forum for DelugeVPN is located here . Install/Setup DelugeVPN WebUI Access If you're attempting to get access to the DelugeVPN WebUI remotely outside of your home network using SWAG you must follow the steps outlined in VPN Information .","title":"DelugeVPN"},{"location":"apps/delugevpn/#delugevpn","text":"","title":"DelugeVPN"},{"location":"apps/delugevpn/#description","text":"DelugeVPN is a Docker build script for Arch Linux base with Deluge , Privoxy and OpenVPN all included in one image. The support forum for DelugeVPN is located here .","title":"Description"},{"location":"apps/delugevpn/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/delugevpn/#delugevpn-webui-access","text":"If you're attempting to get access to the DelugeVPN WebUI remotely outside of your home network using SWAG you must follow the steps outlined in VPN Information .","title":"DelugeVPN WebUI Access"},{"location":"apps/dozzle/","text":"Dozzle Description Dozzle is a simple, lightweight application that provides you with a web based interface to monitor your Docker container logs live. It doesn\u2019t store log information, it is for live monitoring of your container logs only. Install/Setup Dozzle's Security Dozzle doesn't support authentication out of the box. We do not recommend you expose dozzle to the outside world without some sort of protection in front of it such as Organizr's Server Auth .","title":"Dozzle"},{"location":"apps/dozzle/#dozzle","text":"","title":"Dozzle"},{"location":"apps/dozzle/#description","text":"Dozzle is a simple, lightweight application that provides you with a web based interface to monitor your Docker container logs live. It doesn\u2019t store log information, it is for live monitoring of your container logs only.","title":"Description"},{"location":"apps/dozzle/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/dozzle/#dozzles-security","text":"Dozzle doesn't support authentication out of the box. We do not recommend you expose dozzle to the outside world without some sort of protection in front of it such as Organizr's Server Auth .","title":"Dozzle's Security"},{"location":"apps/duckdns/","text":"DuckDNS Description DuckDNS is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence. Install/Setup When installing the DuckDNS container, the you will be prompted for your subdomain and token as part of the variables setup. To get that token, you need to go to the DuckDNS website , register your subdomain(s) and retrieve your token. When the container creates and updates with your subdomain and token, it will then update your IP with the DuckDNS service every 5 minutes.","title":"DuckDNS"},{"location":"apps/duckdns/#duckdns","text":"","title":"DuckDNS"},{"location":"apps/duckdns/#description","text":"DuckDNS is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence.","title":"Description"},{"location":"apps/duckdns/#installsetup","text":"When installing the DuckDNS container, the you will be prompted for your subdomain and token as part of the variables setup. To get that token, you need to go to the DuckDNS website , register your subdomain(s) and retrieve your token. When the container creates and updates with your subdomain and token, it will then update your IP with the DuckDNS service every 5 minutes.","title":"Install/Setup"},{"location":"apps/duplicacy/","text":"Duplicacy Description Duplicacy is built on top of a new idea called Lock-Free Deduplication, which works by relying on the basic file system API to manage deduplicated chunks without using any locks. A two-step fossil collection algorithm is devised to solve the fundamental problem of deleting unreferenced chunks under the lock-free condition, making deletion of old backups possible without using a centralized chunk database.","title":"Duplicacy"},{"location":"apps/duplicacy/#duplicacy","text":"","title":"Duplicacy"},{"location":"apps/duplicacy/#description","text":"Duplicacy is built on top of a new idea called Lock-Free Deduplication, which works by relying on the basic file system API to manage deduplicated chunks without using any locks. A two-step fossil collection algorithm is devised to solve the fundamental problem of deleting unreferenced chunks under the lock-free condition, making deletion of old backups possible without using a centralized chunk database.","title":"Description"},{"location":"apps/duplicati/","text":"Duplicati Description Duplicati is a backup software solution to store encrypted backups online and works with standard protocols like FTP, SSH, WebDAV as well as popular services like Microsoft OneDrive, Amazon Cloud Drive & S3, Google Drive, box, Mega, hubiC and many others. Install/Setup If you install Duplicati, you may be wondering what the important folders and files are to backup in case something goes wrong and you want to restore and be back up and running within minutes. Everything regarding DockSTARTer is found in /source like below: (You can exclude .git and .github )","title":"Duplicati"},{"location":"apps/duplicati/#duplicati","text":"","title":"Duplicati"},{"location":"apps/duplicati/#description","text":"Duplicati is a backup software solution to store encrypted backups online and works with standard protocols like FTP, SSH, WebDAV as well as popular services like Microsoft OneDrive, Amazon Cloud Drive & S3, Google Drive, box, Mega, hubiC and many others.","title":"Description"},{"location":"apps/duplicati/#installsetup","text":"If you install Duplicati, you may be wondering what the important folders and files are to backup in case something goes wrong and you want to restore and be back up and running within minutes. Everything regarding DockSTARTer is found in /source like below: (You can exclude .git and .github )","title":"Install/Setup"},{"location":"apps/emby/","text":"Emby Description Emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices.","title":"Emby"},{"location":"apps/emby/#emby","text":"","title":"Emby"},{"location":"apps/emby/#description","text":"Emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices.","title":"Description"},{"location":"apps/filebot/","text":"FileBot Description FileBot is the ultimate tool for organizing and renaming your Movies, TV Shows and Anime as well as fetching subtitles and artwork. It's smart and just works.","title":"FileBot"},{"location":"apps/filebot/#filebot","text":"","title":"FileBot"},{"location":"apps/filebot/#description","text":"FileBot is the ultimate tool for organizing and renaming your Movies, TV Shows and Anime as well as fetching subtitles and artwork. It's smart and just works.","title":"Description"},{"location":"apps/freshrss/","text":"FreshRSS Description FreshRSS is a free, self-hostable aggregator for RSS feeds.","title":"FreshRSS"},{"location":"apps/freshrss/#freshrss","text":"","title":"FreshRSS"},{"location":"apps/freshrss/#description","text":"FreshRSS is a free, self-hostable aggregator for RSS feeds.","title":"Description"},{"location":"apps/glances/","text":"Glances Description Glances is a cross-platform monitoring tool which aims to present a large amount of monitoring information through a curses or Web based interface. The information dynamically adapts depending on the size of the user interface.","title":"Glances"},{"location":"apps/glances/#glances","text":"","title":"Glances"},{"location":"apps/glances/#description","text":"Glances is a cross-platform monitoring tool which aims to present a large amount of monitoring information through a curses or Web based interface. The information dynamically adapts depending on the size of the user interface.","title":"Description"},{"location":"apps/goaccess/","text":"GoAccess Description GoAccess is an Alpine linux container which builds GoAccess including GeoIP. It reverse proxies the GoAccess HTML files and websockets through NGINX, allowing GoAccess content to be viewed without any other setup. GoAccess itself is an open source real-time web log analyzer and interactive viewer that runs in a terminal in Linux systems or through your browser. It provides fast and valuable HTTP statistics for system administrators that require a visual server report on the fly.","title":"GoAccess"},{"location":"apps/goaccess/#goaccess","text":"","title":"GoAccess"},{"location":"apps/goaccess/#description","text":"GoAccess is an Alpine linux container which builds GoAccess including GeoIP. It reverse proxies the GoAccess HTML files and websockets through NGINX, allowing GoAccess content to be viewed without any other setup. GoAccess itself is an open source real-time web log analyzer and interactive viewer that runs in a terminal in Linux systems or through your browser. It provides fast and valuable HTTP statistics for system administrators that require a visual server report on the fly.","title":"Description"},{"location":"apps/grafana/","text":"Grafana Description Grafana is an open-source platform for monitoring and observability. Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Install/Setup Permissions Problems If you see the following error: mkdir: cannot create directory '/var/lib/grafana/plugins': Permission denied, GF_PATHS_DATA='/var/lib/grafana' is not writable. Run the following command to fix it: sudo chown -R $USER : $USER ~/.config/appdata/grafana","title":"Grafana"},{"location":"apps/grafana/#grafana","text":"","title":"Grafana"},{"location":"apps/grafana/#description","text":"Grafana is an open-source platform for monitoring and observability. Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored.","title":"Description"},{"location":"apps/grafana/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/grafana/#permissions-problems","text":"If you see the following error: mkdir: cannot create directory '/var/lib/grafana/plugins': Permission denied, GF_PATHS_DATA='/var/lib/grafana' is not writable. Run the following command to fix it: sudo chown -R $USER : $USER ~/.config/appdata/grafana","title":"Permissions Problems"},{"location":"apps/grocy/","text":"Grocy Description Grocy is an ERP system for your kitchen! Cut down on food waste, and manage your chores with this brilliant utility. Keep track of your purchases, how much food you are wasting, what chores need doing and what batteries need charging.","title":"Grocy"},{"location":"apps/grocy/#grocy","text":"","title":"Grocy"},{"location":"apps/grocy/#description","text":"Grocy is an ERP system for your kitchen! Cut down on food waste, and manage your chores with this brilliant utility. Keep track of your purchases, how much food you are wasting, what chores need doing and what batteries need charging.","title":"Description"},{"location":"apps/guacamole/","text":"Guacamole Description Guacamole is a Docker container for Apache Guacamole , a client-less remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH over HTML5. Install/Setup You can read through a great guide here which will go over how to protect your Guacamole instance if you ever want it to be accessible over the Internet.","title":"Guacamole"},{"location":"apps/guacamole/#guacamole","text":"","title":"Guacamole"},{"location":"apps/guacamole/#description","text":"Guacamole is a Docker container for Apache Guacamole , a client-less remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH over HTML5.","title":"Description"},{"location":"apps/guacamole/#installsetup","text":"You can read through a great guide here which will go over how to protect your Guacamole instance if you ever want it to be accessible over the Internet.","title":"Install/Setup"},{"location":"apps/h5ai/","text":"H5ai Description H5ai is a modern file indexer for HTTP web servers with focus on your files. Directories are displayed in a appealing way and browsing them is enhanced by different views, a breadcrumb and a tree overview. Initially h5ai was an acronym for HTML5 Apache Index but now it supports other web servers too. This docker image makes it trivially easy to spin up a webserver and start sharing your files through the web.","title":"H5ai"},{"location":"apps/h5ai/#h5ai","text":"","title":"H5ai"},{"location":"apps/h5ai/#description","text":"H5ai is a modern file indexer for HTTP web servers with focus on your files. Directories are displayed in a appealing way and browsing them is enhanced by different views, a breadcrumb and a tree overview. Initially h5ai was an acronym for HTML5 Apache Index but now it supports other web servers too. This docker image makes it trivially easy to spin up a webserver and start sharing your files through the web.","title":"Description"},{"location":"apps/handbrake/","text":"HandBrake Description HandBrake is a tool for converting video from nearly any format to a selection of modern, widely supported codecs. The GUI of the application is accessed through a modern web browser (no installation or configuration needed on client side) or via any VNC client. A fully automated mode is also available: drop files into a watch folder and let HandBrake process them without any user interaction.","title":"HandBrake"},{"location":"apps/handbrake/#handbrake","text":"","title":"HandBrake"},{"location":"apps/handbrake/#description","text":"HandBrake is a tool for converting video from nearly any format to a selection of modern, widely supported codecs. The GUI of the application is accessed through a modern web browser (no installation or configuration needed on client side) or via any VNC client. A fully automated mode is also available: drop files into a watch folder and let HandBrake process them without any user interaction.","title":"Description"},{"location":"apps/headphones/","text":"Headphones Description Headphones is an automated music downloader for NZB and Torrent, written in Python. It supports SABnzbd, NZBget, Transmission, \u00b5Torrent and Blackhole.","title":"Headphones"},{"location":"apps/headphones/#headphones","text":"","title":"Headphones"},{"location":"apps/headphones/#description","text":"Headphones is an automated music downloader for NZB and Torrent, written in Python. It supports SABnzbd, NZBget, Transmission, \u00b5Torrent and Blackhole.","title":"Description"},{"location":"apps/heimdall/","text":"Heimdall Description Heimdall is a dashboard for all your web applications. It doesn't need to be limited to applications though, you can add links to anything you like. Heimdall is an elegant solution to organize all your web applications. It\u2019s dedicated to this purpose so you won\u2019t lose your links in a sea of bookmarks. Install/Setup Reverse Proxy as homepage via SWAG In order to reverse proxy the Heimdall container as your homepage via SWAG you will need to rename the subfolder proxy sample with the following command: cp ~/.config/appdata/swag/nginx/proxy-confs/heimdall.subfolder.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/heimdall.subfolder.conf Then edit ~/.config/appdata/swag/nginx/site-confs/default to comment out the location / { and location ~ \\.php$ { blocks down to their ending } . Example Before: location / { try_files $uri $uri/ /index.html /index.php? $args = 404 ; } location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+) $ ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; include /etc/nginx/fastcgi_params ; } Example After: # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } Lastly, restart the SWAG container: docker restart swag Pre-modified default site-conf This example is based on the default site config included in SWAG found here . It has been modified to remove a lot of example comments and allow Heimdall to take the place of your home page and replace the \"Welcome to our server\" page. This example may not be up to date with the most recent changes from upstream. ## Version 2020/05/23 - Changelog: https://github.com/linuxserver/docker-swag/commits/master/root/defaults/default # redirect all traffic to https server { listen 80 default_server ; listen [::]:80 default_server ; server_name _ ; return 301 https:// $host$request_uri ; } # main server block server { listen 443 ssl http2 default_server ; listen [::]:443 ssl http2 default_server ; root /config/www ; index index.html index.htm index.php ; server_name _ ; # enable subfolder method reverse proxy confs include /config/nginx/proxy-confs/*.subfolder.conf ; # all ssl related config moved to ssl.conf include /config/nginx/ssl.conf ; # enable for ldap auth #include /config/nginx/ldap.conf; # enable for Authelia #include /config/nginx/authelia-server.conf; # enable for geo blocking # See /config/nginx/geoip2.conf for more information. #if ($allowed_country = no) { #return 444; #} client_max_body_size 0 ; # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } } # enable subdomain method reverse proxy confs include /config/nginx/proxy-confs/*.subdomain.conf ; # enable proxy cache for auth proxy_cache_path cache/ keys_zone=auth_cache:10m ;","title":"Heimdall"},{"location":"apps/heimdall/#heimdall","text":"","title":"Heimdall"},{"location":"apps/heimdall/#description","text":"Heimdall is a dashboard for all your web applications. It doesn't need to be limited to applications though, you can add links to anything you like. Heimdall is an elegant solution to organize all your web applications. It\u2019s dedicated to this purpose so you won\u2019t lose your links in a sea of bookmarks.","title":"Description"},{"location":"apps/heimdall/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/heimdall/#reverse-proxy-as-homepage-via-swag","text":"In order to reverse proxy the Heimdall container as your homepage via SWAG you will need to rename the subfolder proxy sample with the following command: cp ~/.config/appdata/swag/nginx/proxy-confs/heimdall.subfolder.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/heimdall.subfolder.conf Then edit ~/.config/appdata/swag/nginx/site-confs/default to comment out the location / { and location ~ \\.php$ { blocks down to their ending } . Example Before: location / { try_files $uri $uri/ /index.html /index.php? $args = 404 ; } location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+) $ ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; include /etc/nginx/fastcgi_params ; } Example After: # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } Lastly, restart the SWAG container: docker restart swag","title":"Reverse Proxy as homepage via SWAG"},{"location":"apps/heimdall/#pre-modified-default-site-conf","text":"This example is based on the default site config included in SWAG found here . It has been modified to remove a lot of example comments and allow Heimdall to take the place of your home page and replace the \"Welcome to our server\" page. This example may not be up to date with the most recent changes from upstream. ## Version 2020/05/23 - Changelog: https://github.com/linuxserver/docker-swag/commits/master/root/defaults/default # redirect all traffic to https server { listen 80 default_server ; listen [::]:80 default_server ; server_name _ ; return 301 https:// $host$request_uri ; } # main server block server { listen 443 ssl http2 default_server ; listen [::]:443 ssl http2 default_server ; root /config/www ; index index.html index.htm index.php ; server_name _ ; # enable subfolder method reverse proxy confs include /config/nginx/proxy-confs/*.subfolder.conf ; # all ssl related config moved to ssl.conf include /config/nginx/ssl.conf ; # enable for ldap auth #include /config/nginx/ldap.conf; # enable for Authelia #include /config/nginx/authelia-server.conf; # enable for geo blocking # See /config/nginx/geoip2.conf for more information. #if ($allowed_country = no) { #return 444; #} client_max_body_size 0 ; # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } } # enable subdomain method reverse proxy confs include /config/nginx/proxy-confs/*.subdomain.conf ; # enable proxy cache for auth proxy_cache_path cache/ keys_zone=auth_cache:10m ;","title":"Pre-modified default site-conf"},{"location":"apps/homeassistant/","text":"Home Assistant Description Home Assistant is a home automation platform running on Python 3 that puts local control and privacy first. It is able to track and control all devices at home and offer a platform for automating control. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server. Install/Setup Environment Variable You may want to create an override for homeassistant with the following if you are receiving a warning every 10 seconds for: device tracking of self-signed Unifi Controller SSL certificated. environment: - PYTHONWARNINGS=\"ignore:Unverified HTTPS request\" Reference: Endless InsecureRequestWarning errors with UniFi","title":"Home Assistant"},{"location":"apps/homeassistant/#home-assistant","text":"","title":"Home Assistant"},{"location":"apps/homeassistant/#description","text":"Home Assistant is a home automation platform running on Python 3 that puts local control and privacy first. It is able to track and control all devices at home and offer a platform for automating control. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server.","title":"Description"},{"location":"apps/homeassistant/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/homeassistant/#environment-variable","text":"You may want to create an override for homeassistant with the following if you are receiving a warning every 10 seconds for: device tracking of self-signed Unifi Controller SSL certificated. environment: - PYTHONWARNINGS=\"ignore:Unverified HTTPS request\" Reference: Endless InsecureRequestWarning errors with UniFi","title":"Environment Variable"},{"location":"apps/htpcmanager/","text":"HTPC Manager Description HTPC Manager is python based web application to manage the software on your HTPC. HTPC Manager combines all your favorite software into one slick interface.","title":"HTPC Manager"},{"location":"apps/htpcmanager/#htpc-manager","text":"","title":"HTPC Manager"},{"location":"apps/htpcmanager/#description","text":"HTPC Manager is python based web application to manage the software on your HTPC. HTPC Manager combines all your favorite software into one slick interface.","title":"Description"},{"location":"apps/httpserver/","text":"HTTP Server Description http-server is a simple binary to provide a static http server from a given folder. Install/Setup The variable HTTPSERVER_FILE_SERVER_COLOR_SET can be modified to use any of the colors listed on here . Whenever you select a color combination, you will get a link at the bottom of the page. The link will include the color towards the end of the link: <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\" /> What you care about is the bit that says indigo-red or indigo-pink . That's the color you will set in variable and run the following command to apply any changes: ds -c up httpserver","title":"HTTP Server"},{"location":"apps/httpserver/#http-server","text":"","title":"HTTP Server"},{"location":"apps/httpserver/#description","text":"http-server is a simple binary to provide a static http server from a given folder.","title":"Description"},{"location":"apps/httpserver/#installsetup","text":"The variable HTTPSERVER_FILE_SERVER_COLOR_SET can be modified to use any of the colors listed on here . Whenever you select a color combination, you will get a link at the bottom of the page. The link will include the color towards the end of the link: <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\" /> What you care about is the bit that says indigo-red or indigo-pink . That's the color you will set in variable and run the following command to apply any changes: ds -c up httpserver","title":"Install/Setup"},{"location":"apps/huginn/","text":"Huginn Description Huginn is a system for building agents that perform automated tasks for you online. They can read the web, watch for events, and take actions on your behalf. Huginn's Agents create and consume events, propagating them along a directed graph. Think of it as a hackable version of IFTTT or Zapier on your own server. You always know who has your data. You do. Install/Setup Huginn is extremely configurable. By default DS only includes variables for the database. The container will run the default variables that are included in their .env.example in the container. However, you can pick and choose which enviroment variables you want to configure and include them in an override .","title":"Huginn"},{"location":"apps/huginn/#huginn","text":"","title":"Huginn"},{"location":"apps/huginn/#description","text":"Huginn is a system for building agents that perform automated tasks for you online. They can read the web, watch for events, and take actions on your behalf. Huginn's Agents create and consume events, propagating them along a directed graph. Think of it as a hackable version of IFTTT or Zapier on your own server. You always know who has your data. You do.","title":"Description"},{"location":"apps/huginn/#installsetup","text":"Huginn is extremely configurable. By default DS only includes variables for the database. The container will run the default variables that are included in their .env.example in the container. However, you can pick and choose which enviroment variables you want to configure and include them in an override .","title":"Install/Setup"},{"location":"apps/influxdb/","text":"InfluxDB Description InfluxDB is an open source time series platform. This includes APIs for storing and querying data, processing it in the background for ETL or monitoring and alerting purposes, user dashboards, and visualizing and exploring the data and more.","title":"InfluxDB"},{"location":"apps/influxdb/#influxdb","text":"","title":"InfluxDB"},{"location":"apps/influxdb/#description","text":"InfluxDB is an open source time series platform. This includes APIs for storing and querying data, processing it in the background for ETL or monitoring and alerting purposes, user dashboards, and visualizing and exploring the data and more.","title":"Description"},{"location":"apps/jackett/","text":"Jackett Description Jackett works as a proxy server: it translates queries from apps (Sonarr, SickRage, CouchPotato, Mylar, etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps.","title":"Jackett"},{"location":"apps/jackett/#jackett","text":"","title":"Jackett"},{"location":"apps/jackett/#description","text":"Jackett works as a proxy server: it translates queries from apps (Sonarr, SickRage, CouchPotato, Mylar, etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps.","title":"Description"},{"location":"apps/jellyfin/","text":"Jellyfin Description Jellyfin is a free software media system that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby's 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who wants to build something better and work together to achieve it.","title":"Jellyfin"},{"location":"apps/jellyfin/#jellyfin","text":"","title":"Jellyfin"},{"location":"apps/jellyfin/#description","text":"Jellyfin is a free software media system that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby's 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who wants to build something better and work together to achieve it.","title":"Description"},{"location":"apps/lazylibrarian/","text":"LazyLibrarian Description LazyLibrarian is a program to follow authors and grab metadata for all your digital reading needs. It uses a combination of Goodreads Librarything and optionally GoogleBooks as sources for author info and book info. This container is based on the DobyTang fork.","title":"LazyLibrarian"},{"location":"apps/lazylibrarian/#lazylibrarian","text":"","title":"LazyLibrarian"},{"location":"apps/lazylibrarian/#description","text":"LazyLibrarian is a program to follow authors and grab metadata for all your digital reading needs. It uses a combination of Goodreads Librarything and optionally GoogleBooks as sources for author info and book info. This container is based on the DobyTang fork.","title":"Description"},{"location":"apps/librespeed/","text":"LibreSpeed Description Librespeed is a very lightweight Speedtest implemented in Javascript, using XMLHttpRequest and Web Workers. No Flash, No Java, No Websocket, No Bullshit.","title":"LibreSpeed"},{"location":"apps/librespeed/#librespeed","text":"","title":"LibreSpeed"},{"location":"apps/librespeed/#description","text":"Librespeed is a very lightweight Speedtest implemented in Javascript, using XMLHttpRequest and Web Workers. No Flash, No Java, No Websocket, No Bullshit.","title":"Description"},{"location":"apps/lidarr/","text":"Lidarr Description Lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.","title":"Lidarr"},{"location":"apps/lidarr/#lidarr","text":"","title":"Lidarr"},{"location":"apps/lidarr/#description","text":"Lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.","title":"Description"},{"location":"apps/limnoria/","text":"Limnoria Description Limnoria a robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot.","title":"Limnoria"},{"location":"apps/limnoria/#limnoria","text":"","title":"Limnoria"},{"location":"apps/limnoria/#description","text":"Limnoria a robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot.","title":"Description"},{"location":"apps/logarr/","text":"Logarr Description Logarr is a self-hosted, single-page, log consolidation tool written in PHP. Install/Setup Logarr configuration has sharing to the logs enabled by default. From within the Logarr container, this is accessible via the /var/log/logarrlogs path. Which is mapped to your ~/.config/appdata path of your host machine. For Logarr you will need to edit the config.php file to point to the correct log files. This file is located in the ~/.config/appdata/logarr/www/logarr/assets/ folder of your host machine. Edit the included config to change these lines: \"Sonarr\" => '/var/log/logarrlogs/sonarr/logs/sonarr.txt', \"Radarr\" => '/var/log/logarrlogs/radarr/logs/radarr.txt',","title":"Logarr"},{"location":"apps/logarr/#logarr","text":"","title":"Logarr"},{"location":"apps/logarr/#description","text":"Logarr is a self-hosted, single-page, log consolidation tool written in PHP.","title":"Description"},{"location":"apps/logarr/#installsetup","text":"Logarr configuration has sharing to the logs enabled by default. From within the Logarr container, this is accessible via the /var/log/logarrlogs path. Which is mapped to your ~/.config/appdata path of your host machine. For Logarr you will need to edit the config.php file to point to the correct log files. This file is located in the ~/.config/appdata/logarr/www/logarr/assets/ folder of your host machine. Edit the included config to change these lines: \"Sonarr\" => '/var/log/logarrlogs/sonarr/logs/sonarr.txt', \"Radarr\" => '/var/log/logarrlogs/radarr/logs/radarr.txt',","title":"Install/Setup"},{"location":"apps/logitechmediaserver/","text":"Logitech Media Server Description Logitech Media Server (aka. LMS, fka. SlimServer, SqueezeCenter, SqueezeboxServer, SliMP3) is the server software that powers audio players from Logitech (formerly known as SlimDevices), including Squeezebox 3rd Generation, Squeezebox Boom, Squeezebox Receiver, Transporter, Squeezebox2, Squeezebox and SLIMP3, and many software emulators like Squeezelite and SqueezePlay. With the help of many plugins, Logitech Media Server can stream not only your local music collection, but content from many music services and internet radio stations to your players.","title":"Logitech Media Server"},{"location":"apps/logitechmediaserver/#logitech-media-server","text":"","title":"Logitech Media Server"},{"location":"apps/logitechmediaserver/#description","text":"Logitech Media Server (aka. LMS, fka. SlimServer, SqueezeCenter, SqueezeboxServer, SliMP3) is the server software that powers audio players from Logitech (formerly known as SlimDevices), including Squeezebox 3rd Generation, Squeezebox Boom, Squeezebox Receiver, Transporter, Squeezebox2, Squeezebox and SLIMP3, and many software emulators like Squeezelite and SqueezePlay. With the help of many plugins, Logitech Media Server can stream not only your local music collection, but content from many music services and internet radio stations to your players.","title":"Description"},{"location":"apps/makemkv/","text":"MakeMKV Description MakeMKV is your one-click solution to convert video that you own into free and patents-unencumbered format that can be played everywhere. MakeMKV is a format converter, otherwise called \"transcoder\". It converts the video clips from proprietary (and usually encrypted) disc into a set of MKV files, preserving most information but not changing it in any way. The MKV format can store multiple video/audio tracks with all meta-information and preserve chapters. There are many players that can play MKV files nearly on all platforms, and there are tools to convert MKV files to many formats, including DVD and Blu-ray discs.","title":"MakeMKV"},{"location":"apps/makemkv/#makemkv","text":"","title":"MakeMKV"},{"location":"apps/makemkv/#description","text":"MakeMKV is your one-click solution to convert video that you own into free and patents-unencumbered format that can be played everywhere. MakeMKV is a format converter, otherwise called \"transcoder\". It converts the video clips from proprietary (and usually encrypted) disc into a set of MKV files, preserving most information but not changing it in any way. The MKV format can store multiple video/audio tracks with all meta-information and preserve chapters. There are many players that can play MKV files nearly on all platforms, and there are tools to convert MKV files to many formats, including DVD and Blu-ray discs.","title":"Description"},{"location":"apps/mariadb/","text":"MariaDB Description MariaDB is one of the most popular database servers. Made by the original developers of MySQL. Install/Setup You can create and manage databases directly from inside the MariaDB container but we recommend you use phpMyAdmin to manage your databases. We heavily recommend that if you spin up a container that requires a database you create a user for that container in phpMyAdmin . You should NEVER use the root account for anything other than database management. Note: The root password cannot be longer than 32 characters ( Source ). We also noticed that phpMyAdmin will not work with complex passwords longer than 16 characters. It seems to only support uppercase, lowercase and numbers.","title":"MariaDB"},{"location":"apps/mariadb/#mariadb","text":"","title":"MariaDB"},{"location":"apps/mariadb/#description","text":"MariaDB is one of the most popular database servers. Made by the original developers of MySQL.","title":"Description"},{"location":"apps/mariadb/#installsetup","text":"You can create and manage databases directly from inside the MariaDB container but we recommend you use phpMyAdmin to manage your databases. We heavily recommend that if you spin up a container that requires a database you create a user for that container in phpMyAdmin . You should NEVER use the root account for anything other than database management. Note: The root password cannot be longer than 32 characters ( Source ). We also noticed that phpMyAdmin will not work with complex passwords longer than 16 characters. It seems to only support uppercase, lowercase and numbers.","title":"Install/Setup"},{"location":"apps/mcmyadmin2/","text":"McMyAdmin This container has been DEPRECATED No replacement.","title":"McMyAdmin"},{"location":"apps/mcmyadmin2/#mcmyadmin","text":"","title":"McMyAdmin"},{"location":"apps/mcmyadmin2/#this-container-has-been-deprecated","text":"No replacement.","title":"This container has been DEPRECATED"},{"location":"apps/medusa/","text":"Medusa Description Medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.","title":"Medusa"},{"location":"apps/medusa/#medusa","text":"","title":"Medusa"},{"location":"apps/medusa/#description","text":"Medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.","title":"Description"},{"location":"apps/minecraft_bedrock_server/","text":"Minecraft Bedrock Server Description This docker image provides a Minecraft Server that will automatically download the latest stable version at startup. Bedrock Dedicated Server is official server software to host your own server for Minecraft (Bedrock).","title":"Minecraft Bedrock Server"},{"location":"apps/minecraft_bedrock_server/#minecraft-bedrock-server","text":"","title":"Minecraft Bedrock Server"},{"location":"apps/minecraft_bedrock_server/#description","text":"This docker image provides a Minecraft Server that will automatically download the latest stable version at startup. Bedrock Dedicated Server is official server software to host your own server for Minecraft (Bedrock).","title":"Description"},{"location":"apps/minecraft_server/","text":"Minecraft Server Description This docker image provides a Minecraft Server that will automatically download the latest stable version at startup. You can also run/upgrade to any specific version or the latest snapshot.","title":"Minecraft Server"},{"location":"apps/minecraft_server/#minecraft-server","text":"","title":"Minecraft Server"},{"location":"apps/minecraft_server/#description","text":"This docker image provides a Minecraft Server that will automatically download the latest stable version at startup. You can also run/upgrade to any specific version or the latest snapshot.","title":"Description"},{"location":"apps/monitorr/","text":"Monitorr Description Monitorr is a webfront to live display the status of any webapp or service.","title":"Monitorr"},{"location":"apps/monitorr/#monitorr","text":"","title":"Monitorr"},{"location":"apps/monitorr/#description","text":"Monitorr is a webfront to live display the status of any webapp or service.","title":"Description"},{"location":"apps/murmur/","text":"Murmur Description Murmur is a VoIP server for Mumble. It is an open-source application that is similar to programs such as Ventrilo or TeamSpeak. Install/Setup SuperUser Password The default user on a Murmur server is called 'SuperUser'. An initial password is generated for this user on first run, and you can find it by looking at the Docker logs for the Murmur container. It will be in a line that looks like Password for 'SuperUser' set to 'something' . You can use this password to login. It is possible to set a specific SuperUser password by using the MURMUR_SUPW environment variable on the docker container, but due to a quirk with the way Murmur is implemented, if you set this SuperUser password variable, the container will simply update the SuperUser password and exit. As such, this variable needs to be unset to start Murmur normally.","title":"Murmur"},{"location":"apps/murmur/#murmur","text":"","title":"Murmur"},{"location":"apps/murmur/#description","text":"Murmur is a VoIP server for Mumble. It is an open-source application that is similar to programs such as Ventrilo or TeamSpeak.","title":"Description"},{"location":"apps/murmur/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/murmur/#superuser-password","text":"The default user on a Murmur server is called 'SuperUser'. An initial password is generated for this user on first run, and you can find it by looking at the Docker logs for the Murmur container. It will be in a line that looks like Password for 'SuperUser' set to 'something' . You can use this password to login. It is possible to set a specific SuperUser password by using the MURMUR_SUPW environment variable on the docker container, but due to a quirk with the way Murmur is implemented, if you set this SuperUser password variable, the container will simply update the SuperUser password and exit. As such, this variable needs to be unset to start Murmur normally.","title":"SuperUser Password"},{"location":"apps/muximux/","text":"Muximux Description Muximux is a lightweight portal to view & manage your HTPC apps without having to run anything more than a PHP enabled webserver. With Muximux you don't need to keep multiple tabs open, or bookmark the URL to all of your apps.","title":"Muximux"},{"location":"apps/muximux/#muximux","text":"","title":"Muximux"},{"location":"apps/muximux/#description","text":"Muximux is a lightweight portal to view & manage your HTPC apps without having to run anything more than a PHP enabled webserver. With Muximux you don't need to keep multiple tabs open, or bookmark the URL to all of your apps.","title":"Description"},{"location":"apps/mylar/","text":"Mylar Description Mylar is an automated Comic Book (cbr/cbz) downloader program for use with NZB and torrents written in python. It supports SABnzbd, NZBGET, and many torrent clients in addition to DDL. It will allow you to monitor weekly pull-lists for items belonging to user-specific series to download, as well as being able to monitor story-arcs. Support for TPB's and GN's is also now available.","title":"Mylar"},{"location":"apps/mylar/#mylar","text":"","title":"Mylar"},{"location":"apps/mylar/#description","text":"Mylar is an automated Comic Book (cbr/cbz) downloader program for use with NZB and torrents written in python. It supports SABnzbd, NZBGET, and many torrent clients in addition to DDL. It will allow you to monitor weekly pull-lists for items belonging to user-specific series to download, as well as being able to monitor story-arcs. Support for TPB's and GN's is also now available.","title":"Description"},{"location":"apps/netdata/","text":"Netdata Description Netdata is distributed, real-time performance and health monitoring for systems and applications. It is a highly-optimized monitoring agent you install on all your systems and containers. Install/Setup Changing Netdata's Hostname By default, Netdata will pull from a UID for the container itself to display in the list of Netdata servers you have, so you would see something like '0f2342dac'. To define this and make it more readable/recognizable for you (In case you have multiple Netdata servers): Stop the netdata container. Create or edit your override file services : netdata : hostname : newnetdataname version : \"3.4\" Once this is done, run sudo ds -c netdata Notifications Add this file to your Netdata config directory. Populate the notification service(s) you want with login, tokens, or whichever is appropriate. Instructions can be found in here . Create health.d directory in the Netdata config directory. Add .conf files from here and select which modules you want alarms for. Also note that one can remove specific alarms by commenting them in the .conf files. How To Get CPU Temp From Raspberry Pi Netdata will not pick up CPU temps by default from a Raspberry Pi. To activate chart for the Pi's CPU temp add a file with name charts.d.conf in the Netdata config directory and add the following line. sensors=force How To Get Data From Netdata To HomeAssistant To identify the correct data group and element to input in netdata home assistant component use http://yournetdataip:19999/api/v1/allmetrics?format=json Monitor services with Netdata Create python.d directory in Netdata config directory. Add this file to your python.d directory. Edit according to instructions in file. Our suggestion is to add after the last line in the .conf file. See example below: # This plugin is intended for simple cases. Currently, the accuracy of the response time is low and should be used as reference only. Hydra: url: 'http://192.168.86.60:5076/nzbhydra/' timeout: 1 redirect: no status_accepted: - 200 regex: '.*hydra.*' Ombi: url: 'http://192.168.86.60:3579/ombi/landingpage' timeout: 1 redirect: yes status_accepted: - 200 regex: '.*ombi.*' You will now get charts in Netdata for Ombi and NZBHydra. Please add your IP and ports accordingly. To get alarms add this file to your health.d directory. Don't forget to comment the unwanted alarms. Slow response alarms can be quite annoying.","title":"Netdata"},{"location":"apps/netdata/#netdata","text":"","title":"Netdata"},{"location":"apps/netdata/#description","text":"Netdata is distributed, real-time performance and health monitoring for systems and applications. It is a highly-optimized monitoring agent you install on all your systems and containers.","title":"Description"},{"location":"apps/netdata/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/netdata/#changing-netdatas-hostname","text":"By default, Netdata will pull from a UID for the container itself to display in the list of Netdata servers you have, so you would see something like '0f2342dac'. To define this and make it more readable/recognizable for you (In case you have multiple Netdata servers): Stop the netdata container. Create or edit your override file services : netdata : hostname : newnetdataname version : \"3.4\" Once this is done, run sudo ds -c netdata","title":"Changing Netdata's Hostname"},{"location":"apps/netdata/#notifications","text":"Add this file to your Netdata config directory. Populate the notification service(s) you want with login, tokens, or whichever is appropriate. Instructions can be found in here . Create health.d directory in the Netdata config directory. Add .conf files from here and select which modules you want alarms for. Also note that one can remove specific alarms by commenting them in the .conf files.","title":"Notifications"},{"location":"apps/netdata/#how-to-get-cpu-temp-from-raspberry-pi","text":"Netdata will not pick up CPU temps by default from a Raspberry Pi. To activate chart for the Pi's CPU temp add a file with name charts.d.conf in the Netdata config directory and add the following line. sensors=force","title":"How To Get CPU Temp From Raspberry Pi"},{"location":"apps/netdata/#how-to-get-data-from-netdata-to-homeassistant","text":"To identify the correct data group and element to input in netdata home assistant component use http://yournetdataip:19999/api/v1/allmetrics?format=json","title":"How To Get Data From Netdata To HomeAssistant"},{"location":"apps/netdata/#monitor-services-with-netdata","text":"Create python.d directory in Netdata config directory. Add this file to your python.d directory. Edit according to instructions in file. Our suggestion is to add after the last line in the .conf file. See example below: # This plugin is intended for simple cases. Currently, the accuracy of the response time is low and should be used as reference only. Hydra: url: 'http://192.168.86.60:5076/nzbhydra/' timeout: 1 redirect: no status_accepted: - 200 regex: '.*hydra.*' Ombi: url: 'http://192.168.86.60:3579/ombi/landingpage' timeout: 1 redirect: yes status_accepted: - 200 regex: '.*ombi.*' You will now get charts in Netdata for Ombi and NZBHydra. Please add your IP and ports accordingly. To get alarms add this file to your health.d directory. Don't forget to comment the unwanted alarms. Slow response alarms can be quite annoying.","title":"Monitor services with Netdata"},{"location":"apps/nextcloud/","text":"Nextcloud Description Nextcloud gives you access to all your files wherever you are. Install/Setup Configuring Nextcloud If you are running the DockSTARTer Nextcloud container behind a SWAG reverse proxy, you may need to add a extra line to the NextCloud config.php file so it can find it. Without configuring this you will be able to access the web page, but apps may timeout or return an invalid password. Run the below command and add the line to the the config.php file before the ); nano /config/www/nextcloud/config/config.php Copy the following line: 'overwritehost' => 'hostname', Where your hostname is the URL you use to access your NextCloud web interface, make sure you include the comma at the end . Doing this will allow the apps to pass the username/password through to the application.","title":"Nextcloud"},{"location":"apps/nextcloud/#nextcloud","text":"","title":"Nextcloud"},{"location":"apps/nextcloud/#description","text":"Nextcloud gives you access to all your files wherever you are.","title":"Description"},{"location":"apps/nextcloud/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/nextcloud/#configuring-nextcloud","text":"If you are running the DockSTARTer Nextcloud container behind a SWAG reverse proxy, you may need to add a extra line to the NextCloud config.php file so it can find it. Without configuring this you will be able to access the web page, but apps may timeout or return an invalid password. Run the below command and add the line to the the config.php file before the ); nano /config/www/nextcloud/config/config.php Copy the following line: 'overwritehost' => 'hostname', Where your hostname is the URL you use to access your NextCloud web interface, make sure you include the comma at the end . Doing this will allow the apps to pass the username/password through to the application.","title":"Configuring Nextcloud"},{"location":"apps/nzbget/","text":"NZBGet Description Nzbget is a usenet downloader, written in C++ and designed with performance in mind to achieve maximum download speed by using very little system resources.","title":"NZBGet"},{"location":"apps/nzbget/#nzbget","text":"","title":"NZBGet"},{"location":"apps/nzbget/#description","text":"Nzbget is a usenet downloader, written in C++ and designed with performance in mind to achieve maximum download speed by using very little system resources.","title":"Description"},{"location":"apps/nzbgetvpn/","text":"NZBGetVPN Description NZBGetVPN is a combination of binhex's NZBGet docker with OpenVPN . The support forum for NZBGetVPN is located here . Install/Setup NZBGetVPN WebUI Access If you're attempting to get access to the NZBGetVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information .","title":"NZBGetVPN"},{"location":"apps/nzbgetvpn/#nzbgetvpn","text":"","title":"NZBGetVPN"},{"location":"apps/nzbgetvpn/#description","text":"NZBGetVPN is a combination of binhex's NZBGet docker with OpenVPN . The support forum for NZBGetVPN is located here .","title":"Description"},{"location":"apps/nzbgetvpn/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/nzbgetvpn/#nzbgetvpn-webui-access","text":"If you're attempting to get access to the NZBGetVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information .","title":"NZBGetVPN WebUI Access"},{"location":"apps/nzbhydra2/","text":"NZBHydra 2 Description NZBHydra 2 is a meta search for NZB indexers. It provides easy access to a number of raw and newznab based indexers. You can search all your indexers from one place and use it as an indexer source for tools like Sonarr, Radarr or CouchPotato.","title":"NZBHydra 2"},{"location":"apps/nzbhydra2/#nzbhydra-2","text":"","title":"NZBHydra 2"},{"location":"apps/nzbhydra2/#description","text":"NZBHydra 2 is a meta search for NZB indexers. It provides easy access to a number of raw and newznab based indexers. You can search all your indexers from one place and use it as an indexer source for tools like Sonarr, Radarr or CouchPotato.","title":"Description"},{"location":"apps/omadacontroller/","text":"Omada Controller Description Docker image based off of Ubuntu 18.04 for TP-Link Omada Controller to control TP-Link Omada EAP Series Wireless Access Points .","title":"Omada Controller"},{"location":"apps/omadacontroller/#omada-controller","text":"","title":"Omada Controller"},{"location":"apps/omadacontroller/#description","text":"Docker image based off of Ubuntu 18.04 for TP-Link Omada Controller to control TP-Link Omada EAP Series Wireless Access Points .","title":"Description"},{"location":"apps/ombi/","text":"Ombi Description Ombi allows you to host your own Plex Request and user management system. If you are sharing your Plex server with other users, allow them to request new content using an easy to manage interface! Manage all your requests for Movies and TV with ease, leave notes for the user and get notification when a user requests something. Allow your users to post issues against their requests so you know there is a problem with the audio etc. Even automatically send them weekly newsletters of new content that has been added to your Plex server!","title":"Ombi"},{"location":"apps/ombi/#ombi","text":"","title":"Ombi"},{"location":"apps/ombi/#description","text":"Ombi allows you to host your own Plex Request and user management system. If you are sharing your Plex server with other users, allow them to request new content using an easy to manage interface! Manage all your requests for Movies and TV with ease, leave notes for the user and get notification when a user requests something. Allow your users to post issues against their requests so you know there is a problem with the audio etc. Even automatically send them weekly newsletters of new content that has been added to your Plex server!","title":"Description"},{"location":"apps/openvpnas/","text":"OpenVPNAS Description OpenVPN-AS is a full featured secure network tunneling VPN software solution that integrates OpenVPN server capabilities, enterprise management capabilities, simplified OpenVPN Connect UI, and OpenVPN Client software packages that accommodate Windows, MAC, Linux, Android, and iOS environments. OpenVPN Access Server supports a wide range of configurations, including secure and granular remote access to internal network and/ or private cloud network resources and applications with fine-grained access control. Install/Setup The admin interface is available at https://<ip>:943/admin with a default user/password of admin/password During first login, make sure that the \"Authentication\" in the Web GUI is set to Local instead of PAM . Then set up the user accounts with their password (user accounts created under PAM do not survive container update or recreation) . The admin account is a system account (PAM) and after container update or recreation, its password reverts back to the default. It is highly recommended to block this user's access for security reasons. To restrict this account do the following: Set another user as an admin . Delete the admin user in the GUI. Modify the as.conf on your host located under ~/.compose/appdata/openvpnas/config/etc and replace the line boot_pam_users.0=admin with #boot_pam_users.0=admin (this only has to be done once and will survive container recreation). Server Network Settings Make sure to change Hostname or IP Address to your public IP or public DNS name. It defaults to the docker internal IP. Also, this goes without saying, make sure to forward the correct ports on your firewall to your host IP.","title":"OpenVPNAS"},{"location":"apps/openvpnas/#openvpnas","text":"","title":"OpenVPNAS"},{"location":"apps/openvpnas/#description","text":"OpenVPN-AS is a full featured secure network tunneling VPN software solution that integrates OpenVPN server capabilities, enterprise management capabilities, simplified OpenVPN Connect UI, and OpenVPN Client software packages that accommodate Windows, MAC, Linux, Android, and iOS environments. OpenVPN Access Server supports a wide range of configurations, including secure and granular remote access to internal network and/ or private cloud network resources and applications with fine-grained access control.","title":"Description"},{"location":"apps/openvpnas/#installsetup","text":"The admin interface is available at https://<ip>:943/admin with a default user/password of admin/password During first login, make sure that the \"Authentication\" in the Web GUI is set to Local instead of PAM . Then set up the user accounts with their password (user accounts created under PAM do not survive container update or recreation) . The admin account is a system account (PAM) and after container update or recreation, its password reverts back to the default. It is highly recommended to block this user's access for security reasons. To restrict this account do the following: Set another user as an admin . Delete the admin user in the GUI. Modify the as.conf on your host located under ~/.compose/appdata/openvpnas/config/etc and replace the line boot_pam_users.0=admin with #boot_pam_users.0=admin (this only has to be done once and will survive container recreation).","title":"Install/Setup"},{"location":"apps/openvpnas/#server-network-settings","text":"Make sure to change Hostname or IP Address to your public IP or public DNS name. It defaults to the docker internal IP. Also, this goes without saying, make sure to forward the correct ports on your firewall to your host IP.","title":"Server Network Settings"},{"location":"apps/organizr/","text":"Organizr Description Organizr allows you to setup \"Tabs\" that will be loaded all in one webpage. You can then work on your server with ease. Want to give users access to some Tabs? No problem, just enable user support and have them make an account. Want guests to be able to visit too? Enable Guest support for those tabs. Install/Setup Reverse Proxy as homepage via SWAG In order to reverse proxy the Organizr container as your homepage via SWAG you will need to rename the subfolder proxy sample with the following command: cp ~/.config/appdata/swag/nginx/proxy-confs/organizr.subfolder.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/organizr.subfolder.conf Then edit ~/.config/appdata/swag/nginx/site-confs/default to comment out the location / { and location ~ \\.php$ { blocks down to their ending } . Example Before: location / { try_files $uri $uri/ /index.html /index.php? $args = 404 ; } location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+) $ ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; include /etc/nginx/fastcgi_params ; } Example After: # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } Lastly, restart the SWAG container: docker restart swag Pre-modified default site-conf This example is based on the default site config included in SWAG found here . It has been modified to remove a lot of example comments and allow Organizr to take the place of your home page and replace the \"Welcome to our server\" page. This example may not be up to date with the most recent changes from upstream. ## Version 2020/05/23 - Changelog: https://github.com/linuxserver/docker-swag/commits/master/root/defaults/default # redirect all traffic to https server { listen 80 default_server ; listen [::]:80 default_server ; server_name _ ; return 301 https:// $host$request_uri ; } # main server block server { listen 443 ssl http2 default_server ; listen [::]:443 ssl http2 default_server ; root /config/www ; index index.html index.htm index.php ; server_name _ ; # enable subfolder method reverse proxy confs include /config/nginx/proxy-confs/*.subfolder.conf ; # all ssl related config moved to ssl.conf include /config/nginx/ssl.conf ; # enable for ldap auth #include /config/nginx/ldap.conf; # enable for Authelia #include /config/nginx/authelia-server.conf; # enable for geo blocking # See /config/nginx/geoip2.conf for more information. #if ($allowed_country = no) { #return 444; #} client_max_body_size 0 ; # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } } # enable subdomain method reverse proxy confs include /config/nginx/proxy-confs/*.subdomain.conf ; # enable proxy cache for auth proxy_cache_path cache/ keys_zone=auth_cache:10m ;","title":"Organizr"},{"location":"apps/organizr/#organizr","text":"","title":"Organizr"},{"location":"apps/organizr/#description","text":"Organizr allows you to setup \"Tabs\" that will be loaded all in one webpage. You can then work on your server with ease. Want to give users access to some Tabs? No problem, just enable user support and have them make an account. Want guests to be able to visit too? Enable Guest support for those tabs.","title":"Description"},{"location":"apps/organizr/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/organizr/#reverse-proxy-as-homepage-via-swag","text":"In order to reverse proxy the Organizr container as your homepage via SWAG you will need to rename the subfolder proxy sample with the following command: cp ~/.config/appdata/swag/nginx/proxy-confs/organizr.subfolder.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/organizr.subfolder.conf Then edit ~/.config/appdata/swag/nginx/site-confs/default to comment out the location / { and location ~ \\.php$ { blocks down to their ending } . Example Before: location / { try_files $uri $uri/ /index.html /index.php? $args = 404 ; } location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+) $ ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; include /etc/nginx/fastcgi_params ; } Example After: # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } Lastly, restart the SWAG container: docker restart swag","title":"Reverse Proxy as homepage via SWAG"},{"location":"apps/organizr/#pre-modified-default-site-conf","text":"This example is based on the default site config included in SWAG found here . It has been modified to remove a lot of example comments and allow Organizr to take the place of your home page and replace the \"Welcome to our server\" page. This example may not be up to date with the most recent changes from upstream. ## Version 2020/05/23 - Changelog: https://github.com/linuxserver/docker-swag/commits/master/root/defaults/default # redirect all traffic to https server { listen 80 default_server ; listen [::]:80 default_server ; server_name _ ; return 301 https:// $host$request_uri ; } # main server block server { listen 443 ssl http2 default_server ; listen [::]:443 ssl http2 default_server ; root /config/www ; index index.html index.htm index.php ; server_name _ ; # enable subfolder method reverse proxy confs include /config/nginx/proxy-confs/*.subfolder.conf ; # all ssl related config moved to ssl.conf include /config/nginx/ssl.conf ; # enable for ldap auth #include /config/nginx/ldap.conf; # enable for Authelia #include /config/nginx/authelia-server.conf; # enable for geo blocking # See /config/nginx/geoip2.conf for more information. #if ($allowed_country = no) { #return 444; #} client_max_body_size 0 ; # location / { # try_files $uri $uri/ /index.html /index.php?$args =404; # } # location ~ \\.php$ { # fastcgi_split_path_info ^(.+\\.php)(/.+)$; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # include /etc/nginx/fastcgi_params; # } } # enable subdomain method reverse proxy confs include /config/nginx/proxy-confs/*.subdomain.conf ; # enable proxy cache for auth proxy_cache_path cache/ keys_zone=auth_cache:10m ;","title":"Pre-modified default site-conf"},{"location":"apps/ouroboros/","text":"Ouroboros Description Ouroboros will automatically update your running Docker containers to the latest available image.","title":"Ouroboros"},{"location":"apps/ouroboros/#ouroboros","text":"","title":"Ouroboros"},{"location":"apps/ouroboros/#description","text":"Ouroboros will automatically update your running Docker containers to the latest available image.","title":"Description"},{"location":"apps/photoshow/","text":"Photoshow Description Photoshow is a gallery software at its easiest, it doesn't even require a database.","title":"Photoshow"},{"location":"apps/photoshow/#photoshow","text":"","title":"Photoshow"},{"location":"apps/photoshow/#description","text":"Photoshow is a gallery software at its easiest, it doesn't even require a database.","title":"Description"},{"location":"apps/photostructure/","text":"PhotoStructure Description PhotoStructure is your new home for all your photos & videos. Install/Setup There are a few directories that get mounted on PhotoStructure that require a bit of a breakdown per the developer. /ps/tmp is PhotoStructure\u2019s \u201cscratch\u201d directory. It must be on a local disk, preferably an SSD. This volume should have at least 16-32 GB free. If your PhotoStructure library is hosted somewhere over the network, then you must set the .env variable PS_FORCE_LOCAL_DB_REPLICA to a 1 . It currently defaults to a 0 .","title":"PhotoStructure"},{"location":"apps/photostructure/#photostructure","text":"","title":"PhotoStructure"},{"location":"apps/photostructure/#description","text":"PhotoStructure is your new home for all your photos & videos.","title":"Description"},{"location":"apps/photostructure/#installsetup","text":"There are a few directories that get mounted on PhotoStructure that require a bit of a breakdown per the developer. /ps/tmp is PhotoStructure\u2019s \u201cscratch\u201d directory. It must be on a local disk, preferably an SSD. This volume should have at least 16-32 GB free. If your PhotoStructure library is hosted somewhere over the network, then you must set the .env variable PS_FORCE_LOCAL_DB_REPLICA to a 1 . It currently defaults to a 0 .","title":"Install/Setup"},{"location":"apps/phpmyadmin/","text":"phpMyAdmin Description phpMyAdmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web.","title":"phpMyAdmin"},{"location":"apps/phpmyadmin/#phpmyadmin","text":"","title":"phpMyAdmin"},{"location":"apps/phpmyadmin/#description","text":"phpMyAdmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web.","title":"Description"},{"location":"apps/pihole/","text":"PiHole Description Pi-hole is a DNS server that is used to filter out advertisements and other unwanted content on a network-wide level. Install/Setup By default, Pi-hole is configured to bind to 0.0.0.0 on port 53. While this configuration should work out of the box for many people, if you encounter issues with this, it is recommended that you set the PIHOLE_SERVER_IP variable to your server's IP address (e.g. 192.168.1.5). If you still encounter difficulties getting Pi-hole to work, you may need to disable or reconfigure any conflicting services running on port 53, such as systemd-resolved . Although this is a more advanced configuration, you can also configure systemd-resolved to not listen on port 53 by setting DNSStubListener=no in /etc/systemd/resolved.conf .","title":"PiHole"},{"location":"apps/pihole/#pihole","text":"","title":"PiHole"},{"location":"apps/pihole/#description","text":"Pi-hole is a DNS server that is used to filter out advertisements and other unwanted content on a network-wide level.","title":"Description"},{"location":"apps/pihole/#installsetup","text":"By default, Pi-hole is configured to bind to 0.0.0.0 on port 53. While this configuration should work out of the box for many people, if you encounter issues with this, it is recommended that you set the PIHOLE_SERVER_IP variable to your server's IP address (e.g. 192.168.1.5). If you still encounter difficulties getting Pi-hole to work, you may need to disable or reconfigure any conflicting services running on port 53, such as systemd-resolved . Although this is a more advanced configuration, you can also configure systemd-resolved to not listen on port 53 by setting DNSStubListener=no in /etc/systemd/resolved.conf .","title":"Install/Setup"},{"location":"apps/piwigo/","text":"Piwigo Description Piwigo is a photo gallery software for the web that comes with powerful features to publish and manage your collection of pictures.","title":"Piwigo"},{"location":"apps/piwigo/#piwigo","text":"","title":"Piwigo"},{"location":"apps/piwigo/#description","text":"Piwigo is a photo gallery software for the web that comes with powerful features to publish and manage your collection of pictures.","title":"Description"},{"location":"apps/plex/","text":"Plex Description Plex organizes video, music and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone Plex Media Server. has always been a top priority. Straightforward design and bulk actions mean getting things done faster. Install/Setup Common Issue: Playback fails for certain media One possible resolution to this issue is to remove the codecs folder: rm -rf \"~/.config/appdata/plex/Library/Application Support/Plex Media Server/Codecs\" Or place a custom init script in your config (ex: ~/.config/appdata/plex/custom-cont-init.d/00-plex-remove-codecs ): #!/usr/bin/with-contenv bash set -euo pipefail IFS = $'\\n\\t' rm -rf \"/config/Library/Application Support/Plex Media Server/Codecs\" echo \"Codecs removed.\" This will run every time the container restarts. Common Issue: Cannot Claim Server on First Run If you are starting the Plex container for the first time and cannot claim your server to set it up there are 3 methods you can try to resolve the issue: 1. Set the PLEX_CLAIM variable docker stop plex docker rm plex # removes the config folder for plex # !WARNING! do NOT do this if you have already setup your plex server and are having issues connecting to it, skip to option 3 instead rm -rf ~/.config/appdata/plex sudo nano ~/.docker/compose/.env # with the nano file editor open locate the PLEX_CLAIM variable # go to https://www.plex.tv/claim/ in your browser and get the claim token set your PLEX_CLAIM variable # the token expires in 5 minutes, so we'll want to get the rest done quickly # ctrl+x to save and exit nano ds -c up plex Then try again to claim the server by visiting http://yourserverip:32400/web/index.html 2. Host Network Mode If the first method does not work, edit your .env and set PLEX_NETWORK_MODE=host . Run ds -c and then attempt to claim your server. After claiming your server set PLEX_NETWORK_MODE= (back to blank). 3. Claim helper script If the first and second methods both have not worked this script should make it happen. docker exec -it plex /bin/bash # download the script curl -L -o plex-claim-server.sh https://github.com/uglymagoo/plex-claim-server/raw/master/plex-claim-server.sh # make the script executable chmod +x plex-claim-server.sh # go to https://www.plex.tv/claim/ in your browser and get the claim token and replace PLEX_CLAIM with this token in the next command, please use use the double quotes around your claim token ./plex-claim-server.sh \"PLEX_CLAIM\" # fix permissions chown abc:abc \"/config/Library/Application Support/Plex Media Server/Preferences.xml\" # leave the container exit docker restart plex How To Run Plex Different Pass Versions Edit ~/.docker/compose/.env and set: PLEX_VERSION = plexpass Then run: ds -c up plex Rebuilding From Scratch Thankfully, some of this information is well documented (but not easily found) over on Plex's website here! Moving an installation to another system: https://support.plex.tv/articles/201370363-move-an-install-to-another-system/ Where is the Plex Media Server data directory? https://support.plex.tv/articles/202915258-where-is-the-plex-media-server-data-directory-located/ Hardware Transcoding If you would like to have Plex use a GPU that is attached to your DockSTARTer host, you can do this using an override like so: plex : devices : - /dev/dri:/dev/dri Refer to this forum post for details: Using Hardware Acceleration in Docker","title":"Plex"},{"location":"apps/plex/#plex","text":"","title":"Plex"},{"location":"apps/plex/#description","text":"Plex organizes video, music and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone Plex Media Server. has always been a top priority. Straightforward design and bulk actions mean getting things done faster.","title":"Description"},{"location":"apps/plex/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/plex/#common-issue-playback-fails-for-certain-media","text":"One possible resolution to this issue is to remove the codecs folder: rm -rf \"~/.config/appdata/plex/Library/Application Support/Plex Media Server/Codecs\" Or place a custom init script in your config (ex: ~/.config/appdata/plex/custom-cont-init.d/00-plex-remove-codecs ): #!/usr/bin/with-contenv bash set -euo pipefail IFS = $'\\n\\t' rm -rf \"/config/Library/Application Support/Plex Media Server/Codecs\" echo \"Codecs removed.\" This will run every time the container restarts.","title":"Common Issue: Playback fails for certain media"},{"location":"apps/plex/#common-issue-cannot-claim-server-on-first-run","text":"If you are starting the Plex container for the first time and cannot claim your server to set it up there are 3 methods you can try to resolve the issue:","title":"Common Issue: Cannot Claim Server on First Run"},{"location":"apps/plex/#1-set-the-plex_claim-variable","text":"docker stop plex docker rm plex # removes the config folder for plex # !WARNING! do NOT do this if you have already setup your plex server and are having issues connecting to it, skip to option 3 instead rm -rf ~/.config/appdata/plex sudo nano ~/.docker/compose/.env # with the nano file editor open locate the PLEX_CLAIM variable # go to https://www.plex.tv/claim/ in your browser and get the claim token set your PLEX_CLAIM variable # the token expires in 5 minutes, so we'll want to get the rest done quickly # ctrl+x to save and exit nano ds -c up plex Then try again to claim the server by visiting http://yourserverip:32400/web/index.html","title":"1. Set the PLEX_CLAIM variable"},{"location":"apps/plex/#2-host-network-mode","text":"If the first method does not work, edit your .env and set PLEX_NETWORK_MODE=host . Run ds -c and then attempt to claim your server. After claiming your server set PLEX_NETWORK_MODE= (back to blank).","title":"2. Host Network Mode"},{"location":"apps/plex/#3-claim-helper-script","text":"If the first and second methods both have not worked this script should make it happen. docker exec -it plex /bin/bash # download the script curl -L -o plex-claim-server.sh https://github.com/uglymagoo/plex-claim-server/raw/master/plex-claim-server.sh # make the script executable chmod +x plex-claim-server.sh # go to https://www.plex.tv/claim/ in your browser and get the claim token and replace PLEX_CLAIM with this token in the next command, please use use the double quotes around your claim token ./plex-claim-server.sh \"PLEX_CLAIM\" # fix permissions chown abc:abc \"/config/Library/Application Support/Plex Media Server/Preferences.xml\" # leave the container exit docker restart plex","title":"3. Claim helper script"},{"location":"apps/plex/#how-to-run-plex-different-pass-versions","text":"Edit ~/.docker/compose/.env and set: PLEX_VERSION = plexpass Then run: ds -c up plex","title":"How To Run Plex Different Pass Versions"},{"location":"apps/plex/#rebuilding-from-scratch","text":"Thankfully, some of this information is well documented (but not easily found) over on Plex's website here! Moving an installation to another system: https://support.plex.tv/articles/201370363-move-an-install-to-another-system/ Where is the Plex Media Server data directory? https://support.plex.tv/articles/202915258-where-is-the-plex-media-server-data-directory-located/","title":"Rebuilding From Scratch"},{"location":"apps/plex/#hardware-transcoding","text":"If you would like to have Plex use a GPU that is attached to your DockSTARTer host, you can do this using an override like so: plex : devices : - /dev/dri:/dev/dri Refer to this forum post for details: Using Hardware Acceleration in Docker","title":"Hardware Transcoding"},{"location":"apps/portainer/","text":"Portainer Description Portainer is a lightweight management UI which allows you to easily manage your Docker host or Swarm cluster.","title":"Portainer"},{"location":"apps/portainer/#portainer","text":"","title":"Portainer"},{"location":"apps/portainer/#description","text":"Portainer is a lightweight management UI which allows you to easily manage your Docker host or Swarm cluster.","title":"Description"},{"location":"apps/portaineragent/","text":"Portainer Agent Description The purpose of the agent is to work around a Docker API limitation. When using the Docker API to manage a Docker environment, the user interactions with specific resources (containers, networks, volumes and images) are limited to these available on the node targeted by the Docker API request. Docker Swarm mode introduces the concept of cluster of Docker nodes. With that concept, it also introduces the services, tasks, configs and secrets which are cluster aware resources. This means that you can query for the list of service or inspect a task inside any node on the cluster as long as you're executing the Docker API request on a manager node. Containers, networks, volumes and images are node specific resources, not cluster aware. If you want to get the list of all the volumes available on the node number 3 inside your cluster, you need to execute the request to query the volumes on that specific node. The agent purpose aims to solve that issue and make the containers, networks and volumes resources cluster aware while keeping the Docker API request format. This means that you only need to execute one Docker API request to retrieve all the volumes inside your cluster for example. The final goal is to bring a better Docker UX when managing Swarm clusters.","title":"Portainer Agent"},{"location":"apps/portaineragent/#portainer-agent","text":"","title":"Portainer Agent"},{"location":"apps/portaineragent/#description","text":"The purpose of the agent is to work around a Docker API limitation. When using the Docker API to manage a Docker environment, the user interactions with specific resources (containers, networks, volumes and images) are limited to these available on the node targeted by the Docker API request. Docker Swarm mode introduces the concept of cluster of Docker nodes. With that concept, it also introduces the services, tasks, configs and secrets which are cluster aware resources. This means that you can query for the list of service or inspect a task inside any node on the cluster as long as you're executing the Docker API request on a manager node. Containers, networks, volumes and images are node specific resources, not cluster aware. If you want to get the list of all the volumes available on the node number 3 inside your cluster, you need to execute the request to query the volumes on that specific node. The agent purpose aims to solve that issue and make the containers, networks and volumes resources cluster aware while keeping the Docker API request format. This means that you only need to execute one Docker API request to retrieve all the volumes inside your cluster for example. The final goal is to bring a better Docker UX when managing Swarm clusters.","title":"Description"},{"location":"apps/prometheus/","text":"Prometheus Description Prometheus is a systems and service monitoring system. It collects metrics from configured targets at given intervals, evaluates rule expressions, displays the results, and can trigger alerts if some condition is observed to be true.","title":"Prometheus"},{"location":"apps/prometheus/#prometheus","text":"","title":"Prometheus"},{"location":"apps/prometheus/#description","text":"Prometheus is a systems and service monitoring system. It collects metrics from configured targets at given intervals, evaluates rule expressions, displays the results, and can trigger alerts if some condition is observed to be true.","title":"Description"},{"location":"apps/pyload/","text":"PyLoad Description Pyload is a Free and Open Source download manager written in Python and designed to be extremely lightweight, easily extensible and fully manageable via web.","title":"PyLoad"},{"location":"apps/pyload/#pyload","text":"","title":"PyLoad"},{"location":"apps/pyload/#description","text":"Pyload is a Free and Open Source download manager written in Python and designed to be extremely lightweight, easily extensible and fully manageable via web.","title":"Description"},{"location":"apps/qbittorrent/","text":"qBittorrent Description qBittorrent project aims to provide an open-source software alternative to \u00b5Torrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.","title":"qBittorrent"},{"location":"apps/qbittorrent/#qbittorrent","text":"","title":"qBittorrent"},{"location":"apps/qbittorrent/#description","text":"qBittorrent project aims to provide an open-source software alternative to \u00b5Torrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.","title":"Description"},{"location":"apps/qbittorrentvpn/","text":"qBittorrentVPN Description qBittorrentVPN is a Docker build script for Arch Linux base with qBittorrent , Privoxy and OpenVPN all included in one image. The support forum for qBittorrentVPN is located here . Install/Setup qBittorrentVPN WebUI Access If you're attempting to get access to the qBittorrentVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information .","title":"qBittorrentVPN"},{"location":"apps/qbittorrentvpn/#qbittorrentvpn","text":"","title":"qBittorrentVPN"},{"location":"apps/qbittorrentvpn/#description","text":"qBittorrentVPN is a Docker build script for Arch Linux base with qBittorrent , Privoxy and OpenVPN all included in one image. The support forum for qBittorrentVPN is located here .","title":"Description"},{"location":"apps/qbittorrentvpn/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/qbittorrentvpn/#qbittorrentvpn-webui-access","text":"If you're attempting to get access to the qBittorrentVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information .","title":"qBittorrentVPN WebUI Access"},{"location":"apps/quasselcore/","text":"Quassel-core Description Quassel-core is a modern, cross-platform, distributed IRC client, meaning that one/multiple client(s) can attach to and detach from a central core. This container handles the IRC connection (quasselcore) and requires a desktop client (quasselclient) to be used and configured. It is designed to be always on and will keep your identity present in IRC even when your clients cannot be online. Backlog (history) is downloaded by your client upon reconnection allowing infinite scrollback through time.","title":"Quassel-core"},{"location":"apps/quasselcore/#quassel-core","text":"","title":"Quassel-core"},{"location":"apps/quasselcore/#description","text":"Quassel-core is a modern, cross-platform, distributed IRC client, meaning that one/multiple client(s) can attach to and detach from a central core. This container handles the IRC connection (quasselcore) and requires a desktop client (quasselclient) to be used and configured. It is designed to be always on and will keep your identity present in IRC even when your clients cannot be online. Backlog (history) is downloaded by your client upon reconnection allowing infinite scrollback through time.","title":"Description"},{"location":"apps/quasselweb/","text":"Quassel-web Description Quassel-web is a web client for Quassel. Note that a Quassel-core instance is required. A container for it can be found here .","title":"Quassel-web"},{"location":"apps/quasselweb/#quassel-web","text":"","title":"Quassel-web"},{"location":"apps/quasselweb/#description","text":"Quassel-web is a web client for Quassel. Note that a Quassel-core instance is required. A container for it can be found here .","title":"Description"},{"location":"apps/radarr/","text":"Radarr Description Radarr a fork of Sonarr to work with movies \u00e0 la Couchpotato.","title":"Radarr"},{"location":"apps/radarr/#radarr","text":"","title":"Radarr"},{"location":"apps/radarr/#description","text":"Radarr a fork of Sonarr to work with movies \u00e0 la Couchpotato.","title":"Description"},{"location":"apps/resiliosync/","text":"Resilio-sync Description Resilio-sync (formerly BitTorrent Sync) uses the BitTorrent protocol to sync files and folders between all of your devices. There are both free and paid versions, this container supports both. There is an official sync image but we created this one as it supports user mapping to simplify permissions for volumes.","title":"Resilio-sync"},{"location":"apps/resiliosync/#resilio-sync","text":"","title":"Resilio-sync"},{"location":"apps/resiliosync/#description","text":"Resilio-sync (formerly BitTorrent Sync) uses the BitTorrent protocol to sync files and folders between all of your devices. There are both free and paid versions, this container supports both. There is an official sync image but we created this one as it supports user mapping to simplify permissions for volumes.","title":"Description"},{"location":"apps/rsnapshot/","text":"Rsnapshot Description Rsnapshot is a filesystem snapshot utility based on rsync. rsnapshot makes it easy to make periodic snapshots of local machines, and remote machines over ssh. The code makes extensive use of hard links whenever possible, to greatly reduce the disk space required.","title":"Rsnapshot"},{"location":"apps/rsnapshot/#rsnapshot","text":"","title":"Rsnapshot"},{"location":"apps/rsnapshot/#description","text":"Rsnapshot is a filesystem snapshot utility based on rsync. rsnapshot makes it easy to make periodic snapshots of local machines, and remote machines over ssh. The code makes extensive use of hard links whenever possible, to greatly reduce the disk space required.","title":"Description"},{"location":"apps/rtorrentvpn/","text":"rTorrentVPN Description rTorrentVPN is a Docker build script for Arch Linux base with rtorrent-ps , ruTorrent , autodl-irssi , Privoxy and OpenVPN all included in one image. The support forum for rTorrentVPN is located here . Install/Setup rTorrentVPN WebUI Access If you're attempting to get access to the rTorrentVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information . The sample proxy configuration files found in ~/.config/appdata/swag/nginx/proxy-confs/ will need to be modified and as usual, have the .sample removed from the filename. You will need to edit the appropriate proxy .conf . Enter either sudo nano rutorrent.subfolder.conf or sudo nano rutorrent.subdomain.conf depending on your configuration desires and change the below lines. NOTE: There will be multiple lines that need to be changed. Original set $upstream_app rutorrent ; set $upstream_port 80 ; Modified set $upstream_app rtorrentvpn ; set $upstream_port 9080 ; Save the file and restart your container by running: docker restart swag","title":"rTorrentVPN"},{"location":"apps/rtorrentvpn/#rtorrentvpn","text":"","title":"rTorrentVPN"},{"location":"apps/rtorrentvpn/#description","text":"rTorrentVPN is a Docker build script for Arch Linux base with rtorrent-ps , ruTorrent , autodl-irssi , Privoxy and OpenVPN all included in one image. The support forum for rTorrentVPN is located here .","title":"Description"},{"location":"apps/rtorrentvpn/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/rtorrentvpn/#rtorrentvpn-webui-access","text":"If you're attempting to get access to the rTorrentVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information . The sample proxy configuration files found in ~/.config/appdata/swag/nginx/proxy-confs/ will need to be modified and as usual, have the .sample removed from the filename. You will need to edit the appropriate proxy .conf . Enter either sudo nano rutorrent.subfolder.conf or sudo nano rutorrent.subdomain.conf depending on your configuration desires and change the below lines. NOTE: There will be multiple lines that need to be changed. Original set $upstream_app rutorrent ; set $upstream_port 80 ; Modified set $upstream_app rtorrentvpn ; set $upstream_port 9080 ; Save the file and restart your container by running: docker restart swag","title":"rTorrentVPN WebUI Access"},{"location":"apps/rutorrent/","text":"ruTorrent Description ruTorrent is a popular rTorrent client with a webui for ease of use.","title":"ruTorrent"},{"location":"apps/rutorrent/#rutorrent","text":"","title":"ruTorrent"},{"location":"apps/rutorrent/#description","text":"ruTorrent is a popular rTorrent client with a webui for ease of use.","title":"Description"},{"location":"apps/sabnzbd/","text":"SABnzbd Description SABnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. and SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.","title":"SABnzbd"},{"location":"apps/sabnzbd/#sabnzbd","text":"","title":"SABnzbd"},{"location":"apps/sabnzbd/#description","text":"SABnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. and SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.","title":"Description"},{"location":"apps/sabnzbdvpn/","text":"SABnzbdVPN Description SABnzbd is a Docker build script for Arch Linux base with SABnzbd , Privoxy and OpenVPN all included in one image. The support forum for SABnzbdVPN is located here . Install/Setup DelugeVPN WebUI Access If you're attempting to get access to the DelugeVPN WebUI remotely outside of your home network using SWAG you must follow the steps outlined in VPN Information .","title":"SABnzbdVPN"},{"location":"apps/sabnzbdvpn/#sabnzbdvpn","text":"","title":"SABnzbdVPN"},{"location":"apps/sabnzbdvpn/#description","text":"SABnzbd is a Docker build script for Arch Linux base with SABnzbd , Privoxy and OpenVPN all included in one image. The support forum for SABnzbdVPN is located here .","title":"Description"},{"location":"apps/sabnzbdvpn/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/sabnzbdvpn/#delugevpn-webui-access","text":"If you're attempting to get access to the DelugeVPN WebUI remotely outside of your home network using SWAG you must follow the steps outlined in VPN Information .","title":"DelugeVPN WebUI Access"},{"location":"apps/samba/","text":"Samba Description Samba is using the SMB protocol to share Linux mounts, which then are accessible and mountable on a Windows computer. By default, Samba will share all media directories and Docker config directory over SMB on the host. All of these directories will be placed inside whatever share name is specified for SAMBA_SHARENAME on your .env file. These shares are protected with username ds and password ds by default, but can and should be changed on your .env file. Install/Setup Access Shares Replace host with your DNS or IP-address of your Docker host. \\\\host\\DockSTARTer Setting Up Additional Shares You can set up additional shares using an override . To do so, you need to do the following: Create a new variable in your .env file that will be the path to your new share on the host e.g. /path/to/your/share and give it an easily recognizable name e.g. SAMBA_xxxx=/path/to/share . Create another variable that will be the share name that shows up when you access your shares. For example, SAMBA_SHARE_xxx=AnotherShare On your override file under environment and volumes you will you need to copy the following: environment : - SHARE2=${SAMBA_SHARENAME};/${SAMBA_SHARENAME};yes;no;no;all;${SAMBA_USERNAME} volumes : - ${SAMBA_xxx}:/path/inside/container Make sure to update what is inside ${} to match whatever you used in Step 2. If you want to add additional shares in the future just add a number at the end of the SHARE and just copy and paste everything after the = . Don't forget to update what is inside the ${} . Run ds -c up samba to recreate the container and the new share can be generated. How To Mount Windows Share in Linux See SMB Mounting .","title":"Samba"},{"location":"apps/samba/#samba","text":"","title":"Samba"},{"location":"apps/samba/#description","text":"Samba is using the SMB protocol to share Linux mounts, which then are accessible and mountable on a Windows computer. By default, Samba will share all media directories and Docker config directory over SMB on the host. All of these directories will be placed inside whatever share name is specified for SAMBA_SHARENAME on your .env file. These shares are protected with username ds and password ds by default, but can and should be changed on your .env file.","title":"Description"},{"location":"apps/samba/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/samba/#access-shares","text":"Replace host with your DNS or IP-address of your Docker host. \\\\host\\DockSTARTer","title":"Access Shares"},{"location":"apps/samba/#setting-up-additional-shares","text":"You can set up additional shares using an override . To do so, you need to do the following: Create a new variable in your .env file that will be the path to your new share on the host e.g. /path/to/your/share and give it an easily recognizable name e.g. SAMBA_xxxx=/path/to/share . Create another variable that will be the share name that shows up when you access your shares. For example, SAMBA_SHARE_xxx=AnotherShare On your override file under environment and volumes you will you need to copy the following: environment : - SHARE2=${SAMBA_SHARENAME};/${SAMBA_SHARENAME};yes;no;no;all;${SAMBA_USERNAME} volumes : - ${SAMBA_xxx}:/path/inside/container Make sure to update what is inside ${} to match whatever you used in Step 2. If you want to add additional shares in the future just add a number at the end of the SHARE and just copy and paste everything after the = . Don't forget to update what is inside the ${} . Run ds -c up samba to recreate the container and the new share can be generated.","title":"Setting Up Additional Shares"},{"location":"apps/samba/#how-to-mount-windows-share-in-linux","text":"See SMB Mounting .","title":"How To Mount Windows Share in Linux"},{"location":"apps/sickchill/","text":"SickChill Description SickChill is an Automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.","title":"SickChill"},{"location":"apps/sickchill/#sickchill","text":"","title":"SickChill"},{"location":"apps/sickchill/#description","text":"SickChill is an Automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.","title":"Description"},{"location":"apps/sickrage/","text":"SickRage This container has been DEPRECATED","title":"SickRage"},{"location":"apps/sickrage/#sickrage","text":"","title":"SickRage"},{"location":"apps/sickrage/#this-container-has-been-deprecated","text":"","title":"This container has been DEPRECATED"},{"location":"apps/smokeping/","text":"Smokeping Description Smokeping keeps track of your network latency.","title":"Smokeping"},{"location":"apps/smokeping/#smokeping","text":"","title":"Smokeping"},{"location":"apps/smokeping/#description","text":"Smokeping keeps track of your network latency.","title":"Description"},{"location":"apps/sonarr/","text":"Sonarr Description Sonarr formerly (NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.","title":"Sonarr"},{"location":"apps/sonarr/#sonarr","text":"","title":"Sonarr"},{"location":"apps/sonarr/#description","text":"Sonarr formerly (NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.","title":"Description"},{"location":"apps/speedtest/","text":"Speedtest Description This program runs a speedtest check every hour and graphs the results. The back-end is written in Laravel and the front-end uses React . It uses the Ookla's Speedtest cli package to get the data and uses Chart.js to plot the results. This program can also be used a home page item in Organizr . A demo is available here . Disclaimer: You will need to accept Ookla's EULA and privacy agreements in order to use this container. Install/Setup Base Path You can set a base path for this application if you want to host it behind a reverse proxy. By default it binds to / , but you can change the variable called SPEEDTEST_BASE_PATH in your .env file to whatever you want and run ds -c up speedtest afterwards. As usual, we strongly discourage having this application be public facing without some sort of protection in front of it, such as Organizr's Server Auth . Notifications This application supports notifications to some of the most popular services such as Telegram and Discord. Both of these services can be configured either using the application's Web GUI or environment variables through an override .","title":"Speedtest"},{"location":"apps/speedtest/#speedtest","text":"","title":"Speedtest"},{"location":"apps/speedtest/#description","text":"This program runs a speedtest check every hour and graphs the results. The back-end is written in Laravel and the front-end uses React . It uses the Ookla's Speedtest cli package to get the data and uses Chart.js to plot the results. This program can also be used a home page item in Organizr . A demo is available here . Disclaimer: You will need to accept Ookla's EULA and privacy agreements in order to use this container.","title":"Description"},{"location":"apps/speedtest/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/speedtest/#base-path","text":"You can set a base path for this application if you want to host it behind a reverse proxy. By default it binds to / , but you can change the variable called SPEEDTEST_BASE_PATH in your .env file to whatever you want and run ds -c up speedtest afterwards. As usual, we strongly discourage having this application be public facing without some sort of protection in front of it, such as Organizr's Server Auth .","title":"Base Path"},{"location":"apps/speedtest/#notifications","text":"This application supports notifications to some of the most popular services such as Telegram and Discord. Both of these services can be configured either using the application's Web GUI or environment variables through an override .","title":"Notifications"},{"location":"apps/swag/","text":"SWAG Description SWAG (Secure Web-server And Gateway) sets up an NGINX webserver and reverse proxy with PHP support and a built-in swag client that automates free SSL server certificate generation and renewal processes. It also contains fail2ban for intrusion prevention. Install/Setup LinuxServer's SWAG Starter Guide Official Guide If this is your first time learning about NGINX, proxies, or and Let's Encrypt, we highly recommend you read over the official guide for the container. General Setup Out of the box, the SWAG container created by linuxserver.io performs reverse proxy functions using NGINX and automatic https encrypted connections using certificates provided by Let's Encrypt . To configure your reverse proxy, consider if you want to use subfolders (ie. domain.com/portainer) or subdomains (ie. portainer.domain.com). Subdomains will take more configuration, as DNS entries and certificate subject alternate names are required. The first thing to setup is your domain and email settings in .docker/compose/.env under SWAG . Set the SWAG_EMAIL and SWAG_URL . If using subdomains ensure to add each subdomain to SWAG_SUBDOMAINS as each subdomain prefix (e.g. SWAG_SUBDOMAINS=portainer,deluge,pihole . There are a number of sample proxy configuration files found in ~/.config/appdata/swag/nginx/proxy-confs/ and in most cases will just need the .sample removed from the filename. Currently not every applicable app has an example configuration and are still being tested. Subfolder Example: cp ~/.config/appdata/swag/nginx/proxy-confs/portainer.subfolder.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/portainer.subfolder.conf This will make Portainer available at domain.com/portainer Subdomain Example: cp ~/.config/appdata/swag/nginx/proxy-confs/portainer.subdomain.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/portainer.subdomain.conf and will enable the service at portainer.domain.com Each time you change a proxy conf file you will need to restart the Swag container: docker restart swag","title":"SWAG"},{"location":"apps/swag/#swag","text":"","title":"SWAG"},{"location":"apps/swag/#description","text":"SWAG (Secure Web-server And Gateway) sets up an NGINX webserver and reverse proxy with PHP support and a built-in swag client that automates free SSL server certificate generation and renewal processes. It also contains fail2ban for intrusion prevention.","title":"Description"},{"location":"apps/swag/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/swag/#linuxservers-swag-starter-guide","text":"Official Guide If this is your first time learning about NGINX, proxies, or and Let's Encrypt, we highly recommend you read over the official guide for the container.","title":"LinuxServer's SWAG Starter Guide"},{"location":"apps/swag/#general-setup","text":"Out of the box, the SWAG container created by linuxserver.io performs reverse proxy functions using NGINX and automatic https encrypted connections using certificates provided by Let's Encrypt . To configure your reverse proxy, consider if you want to use subfolders (ie. domain.com/portainer) or subdomains (ie. portainer.domain.com). Subdomains will take more configuration, as DNS entries and certificate subject alternate names are required. The first thing to setup is your domain and email settings in .docker/compose/.env under SWAG . Set the SWAG_EMAIL and SWAG_URL . If using subdomains ensure to add each subdomain to SWAG_SUBDOMAINS as each subdomain prefix (e.g. SWAG_SUBDOMAINS=portainer,deluge,pihole . There are a number of sample proxy configuration files found in ~/.config/appdata/swag/nginx/proxy-confs/ and in most cases will just need the .sample removed from the filename. Currently not every applicable app has an example configuration and are still being tested. Subfolder Example: cp ~/.config/appdata/swag/nginx/proxy-confs/portainer.subfolder.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/portainer.subfolder.conf This will make Portainer available at domain.com/portainer Subdomain Example: cp ~/.config/appdata/swag/nginx/proxy-confs/portainer.subdomain.conf.sample ~/.config/appdata/swag/nginx/proxy-confs/portainer.subdomain.conf and will enable the service at portainer.domain.com Each time you change a proxy conf file you will need to restart the Swag container: docker restart swag","title":"General Setup"},{"location":"apps/synclounge/","text":"SyncLounge Description SyncLounge is a third party tool that allows you to watch Plex in sync with your friends/family, wherever you are. Install/Setup SyncLounge works best if you have a domain to use and it is recommended that you use this with the SWAG container supported by DockSTARTer. Also, since some Plex clients can only operate over HTTP, SyncLounge needs to be accessible by HTTP or your users will need to enable mixed content in their browser for ONLY the domain SyncLounge is on. The below steps assume that you already have the SWAG container selected, configured, and running. If not, do that first or along with steps 1 & 2 below. Enable SyncLounge by running: ds -a synclounge Complete the DockSTARTer configuration. Make sure to set the SYNCLOUNGE_EXTERNAL_URL setting to the appropriate domain. E.g. - synclouge.yourdomain.tld Otherwise, keep the default settings until you make sure everything is working okay Recreate the container so settings get applied: ds -c up synclounge Find the file called synclounge.subdomain.conf.sample in your SWAG proxy-confs folder and rename it to synclounge.subdomain.conf (By default, this has HTTP and HTTPS enabled). Restart the SWAG container: docker restart swag You should now be able to go to synclouge.yourdomain.tld and use SyncLounge! Once you verify that everything is working, you can then start tinkering with settings. If you would rather have SyncLounge running under a different domain as a subfolder, you can use the synclounge.subfolder.conf.sample . This file contains instructions for how to enable HTTP for the domain, how to force HTTP (if desired), as well as how to change the URL SyncLounge operates on. Advanced Override Servers List If you want to override the Servers List you'll need to create an override to mount your servers file. Create a file called servers.json in your SyncLounge folder ( ~/.config/appdata/synclounge/ ) and populate it with servers by following this guide . Your servers.json file should NOT include the \"servers\": prefix (that is for the settings file which isn't used here). Only [] and the server objects inside should be included. Add or update your override file to include the example below: version : \"3.4\" services : synclounge : volumes : - ${DOCKERCONFDIR}/synclounge/servers.json:/defaults/servers.json Recreate your container: ds -c up synclounge","title":"SyncLounge"},{"location":"apps/synclounge/#synclounge","text":"","title":"SyncLounge"},{"location":"apps/synclounge/#description","text":"SyncLounge is a third party tool that allows you to watch Plex in sync with your friends/family, wherever you are.","title":"Description"},{"location":"apps/synclounge/#installsetup","text":"SyncLounge works best if you have a domain to use and it is recommended that you use this with the SWAG container supported by DockSTARTer. Also, since some Plex clients can only operate over HTTP, SyncLounge needs to be accessible by HTTP or your users will need to enable mixed content in their browser for ONLY the domain SyncLounge is on. The below steps assume that you already have the SWAG container selected, configured, and running. If not, do that first or along with steps 1 & 2 below. Enable SyncLounge by running: ds -a synclounge Complete the DockSTARTer configuration. Make sure to set the SYNCLOUNGE_EXTERNAL_URL setting to the appropriate domain. E.g. - synclouge.yourdomain.tld Otherwise, keep the default settings until you make sure everything is working okay Recreate the container so settings get applied: ds -c up synclounge Find the file called synclounge.subdomain.conf.sample in your SWAG proxy-confs folder and rename it to synclounge.subdomain.conf (By default, this has HTTP and HTTPS enabled). Restart the SWAG container: docker restart swag You should now be able to go to synclouge.yourdomain.tld and use SyncLounge! Once you verify that everything is working, you can then start tinkering with settings. If you would rather have SyncLounge running under a different domain as a subfolder, you can use the synclounge.subfolder.conf.sample . This file contains instructions for how to enable HTTP for the domain, how to force HTTP (if desired), as well as how to change the URL SyncLounge operates on.","title":"Install/Setup"},{"location":"apps/synclounge/#advanced","text":"","title":"Advanced"},{"location":"apps/synclounge/#override-servers-list","text":"If you want to override the Servers List you'll need to create an override to mount your servers file. Create a file called servers.json in your SyncLounge folder ( ~/.config/appdata/synclounge/ ) and populate it with servers by following this guide . Your servers.json file should NOT include the \"servers\": prefix (that is for the settings file which isn't used here). Only [] and the server objects inside should be included. Add or update your override file to include the example below: version : \"3.4\" services : synclounge : volumes : - ${DOCKERCONFDIR}/synclounge/servers.json:/defaults/servers.json Recreate your container: ds -c up synclounge","title":"Override Servers List"},{"location":"apps/syncthing/","text":"Syncthing Description Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet.","title":"Syncthing"},{"location":"apps/syncthing/#syncthing","text":"","title":"Syncthing"},{"location":"apps/syncthing/#description","text":"Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet.","title":"Description"},{"location":"apps/tautulli/","text":"Tautulli Description Tautulli is a python based web application for monitoring, analytics and notifications for Plex Media Server.","title":"Tautulli"},{"location":"apps/tautulli/#tautulli","text":"","title":"Tautulli"},{"location":"apps/tautulli/#description","text":"Tautulli is a python based web application for monitoring, analytics and notifications for Plex Media Server.","title":"Description"},{"location":"apps/tdarr/","text":"Tdarr Description Tdarr is a self hosted web-app for automating media library transcode/remux management and making sure your files are exactly how you need them to be in terms of codecs/streams/containers etc. Designed to work alongside Sonarr/Radarr and built with the aim of modularisation, parallelisation and scalability, each library you add has its own transcode settings, filters and schedule. Workers can be fired up and closed down as necessary, and are split into 3 types - 'general', 'transcode' and 'health check'. Worker limits can be managed by the scheduler as well as manually. Install/Setup Common Errors If you start up the container for the first time and can't get the UI to load please check the logs by running: docker logs tdarr If you see the following error on the console: Starting database mongodb ...fail Permissions are likely not set correctly on your TDARR_DB variable location, run the following: sudo chown -R $USER : $USER /path/to/location","title":"Tdarr"},{"location":"apps/tdarr/#tdarr","text":"","title":"Tdarr"},{"location":"apps/tdarr/#description","text":"Tdarr is a self hosted web-app for automating media library transcode/remux management and making sure your files are exactly how you need them to be in terms of codecs/streams/containers etc. Designed to work alongside Sonarr/Radarr and built with the aim of modularisation, parallelisation and scalability, each library you add has its own transcode settings, filters and schedule. Workers can be fired up and closed down as necessary, and are split into 3 types - 'general', 'transcode' and 'health check'. Worker limits can be managed by the scheduler as well as manually.","title":"Description"},{"location":"apps/tdarr/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/tdarr/#common-errors","text":"If you start up the container for the first time and can't get the UI to load please check the logs by running: docker logs tdarr If you see the following error on the console: Starting database mongodb ...fail Permissions are likely not set correctly on your TDARR_DB variable location, run the following: sudo chown -R $USER : $USER /path/to/location","title":"Common Errors"},{"location":"apps/telegraf/","text":"Telegraf Description Telegraf is an agent for collecting, processing, aggregating, and writing metrics.Design goals are to have a minimal memory footprint with a plugin system so that developers in the community can easily add support for collecting metrics.","title":"Telegraf"},{"location":"apps/telegraf/#telegraf","text":"","title":"Telegraf"},{"location":"apps/telegraf/#description","text":"Telegraf is an agent for collecting, processing, aggregating, and writing metrics.Design goals are to have a minimal memory footprint with a plugin system so that developers in the community can easily add support for collecting metrics.","title":"Description"},{"location":"apps/thelounge/","text":"TheLounge Description TheLounge is a web IRC client that you host on your own server.","title":"TheLounge"},{"location":"apps/thelounge/#thelounge","text":"","title":"TheLounge"},{"location":"apps/thelounge/#description","text":"TheLounge is a web IRC client that you host on your own server.","title":"Description"},{"location":"apps/traktarr/","text":"Traktarr Description Traktarr is script to add new series & movies to Sonarr/Radarr based on Trakt lists.","title":"Traktarr"},{"location":"apps/traktarr/#traktarr","text":"","title":"Traktarr"},{"location":"apps/traktarr/#description","text":"Traktarr is script to add new series & movies to Sonarr/Radarr based on Trakt lists.","title":"Description"},{"location":"apps/transmission/","text":"Transmission Description Transmission is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, \u00b5TP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.","title":"Transmission"},{"location":"apps/transmission/#transmission","text":"","title":"Transmission"},{"location":"apps/transmission/#description","text":"Transmission is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, \u00b5TP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.","title":"Description"},{"location":"apps/transmissionvpn/","text":"TransmissionVPN Description This container contains OpenVPN and Transmission with a configuration where Transmission is running only when OpenVPN has an active tunnel. It bundles configuration files for many popular VPN providers to make the setup easier. Install/Setup TransmissionVPN WebUI Access If you're attempting to get access to the TransmissionVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information .","title":"TransmissionVPN"},{"location":"apps/transmissionvpn/#transmissionvpn","text":"","title":"TransmissionVPN"},{"location":"apps/transmissionvpn/#description","text":"This container contains OpenVPN and Transmission with a configuration where Transmission is running only when OpenVPN has an active tunnel. It bundles configuration files for many popular VPN providers to make the setup easier.","title":"Description"},{"location":"apps/transmissionvpn/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/transmissionvpn/#transmissionvpn-webui-access","text":"If you're attempting to get access to the TransmissionVPN WebUI remotely outside of your home network, you are going to have to do this through a reverse proxy using SWAG . Full details and steps are outlined here VPN Information .","title":"TransmissionVPN WebUI Access"},{"location":"apps/tvheadend/","text":"Tvheadend Description TVheadend works as a proxy server: is a TV streaming server and recorder for Linux, FreeBSD and Android supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, ISDB-T, IPTV, SAT>IP and HDHomeRun as input sources. Tvheadend offers the HTTP (VLC, MPlayer), HTSP (Kodi, Movian) and SAT>IP streaming. Multiple EPG sources are supported (over-the-air DVB and ATSC including OpenTV DVB extensions, XMLTV, PyXML).","title":"Tvheadend"},{"location":"apps/tvheadend/#tvheadend","text":"","title":"Tvheadend"},{"location":"apps/tvheadend/#description","text":"TVheadend works as a proxy server: is a TV streaming server and recorder for Linux, FreeBSD and Android supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, ISDB-T, IPTV, SAT>IP and HDHomeRun as input sources. Tvheadend offers the HTTP (VLC, MPlayer), HTSP (Kodi, Movian) and SAT>IP streaming. Multiple EPG sources are supported (over-the-air DVB and ATSC including OpenTV DVB extensions, XMLTV, PyXML).","title":"Description"},{"location":"apps/ubooquity/","text":"Ubooquity Description Ubooquity is a free, lightweight and easy-to-use home server for your comics and ebooks. Use it to access your files from anywhere, with a tablet, an e-reader, a phone or a computer.","title":"Ubooquity"},{"location":"apps/ubooquity/#ubooquity","text":"","title":"Ubooquity"},{"location":"apps/ubooquity/#description","text":"Ubooquity is a free, lightweight and easy-to-use home server for your comics and ebooks. Use it to access your files from anywhere, with a tablet, an e-reader, a phone or a computer.","title":"Description"},{"location":"apps/unificontroller/","text":"UniFi Controller Description UniFi Controller software is a powerful, enterprise wireless software engine ideal for high-density client deployments requiring low latency and high uptime performance. Install/Setup Devices Get Stuck In \"Adopting\" State When you first log in to your controller, you need to change the controller's IP address under Settings > Controller Settings > Advanced Configuration . On the right hand side, you will see Controller Hostname/IP , change this to your Docker host's IP address or hostname. If you don't see this option or are having problems finding the settings then look over near the top and click Can't find what you need? Switch to Classic Mode . You will then need to go to Controller near the bottom and on the right hand side look for Controller Hostname/IP and change it to your Docker host IP address or hostname.","title":"UniFi Controller"},{"location":"apps/unificontroller/#unifi-controller","text":"","title":"UniFi Controller"},{"location":"apps/unificontroller/#description","text":"UniFi Controller software is a powerful, enterprise wireless software engine ideal for high-density client deployments requiring low latency and high uptime performance.","title":"Description"},{"location":"apps/unificontroller/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/unificontroller/#devices-get-stuck-in-adopting-state","text":"When you first log in to your controller, you need to change the controller's IP address under Settings > Controller Settings > Advanced Configuration . On the right hand side, you will see Controller Hostname/IP , change this to your Docker host's IP address or hostname. If you don't see this option or are having problems finding the settings then look over near the top and click Can't find what you need? Switch to Classic Mode . You will then need to go to Controller near the bottom and on the right hand side look for Controller Hostname/IP and change it to your Docker host IP address or hostname.","title":"Devices Get Stuck In \"Adopting\" State"},{"location":"apps/unmanic/","text":"Unmanic Description Unmanic is a simple tool for optimizing your video library to a single format. The ultimate goal of Unmanic is to take the complexity out of converting your whole media library. The idea is to simply point Unmanic at your library and let it manage it.","title":"Unmanic"},{"location":"apps/unmanic/#unmanic","text":"","title":"Unmanic"},{"location":"apps/unmanic/#description","text":"Unmanic is a simple tool for optimizing your video library to a single format. The ultimate goal of Unmanic is to take the complexity out of converting your whole media library. The idea is to simply point Unmanic at your library and let it manage it.","title":"Description"},{"location":"apps/varken/","text":"Varken Description Varken is a standalone application to aggregate data from the Plex ecosystem into InfluxDB using Grafana for a frontend Fun fact: Varken is Dutch for pig. PIG is an acronym for Plex/InfluxDB/Grafana","title":"Varken"},{"location":"apps/varken/#varken","text":"","title":"Varken"},{"location":"apps/varken/#description","text":"Varken is a standalone application to aggregate data from the Plex ecosystem into InfluxDB using Grafana for a frontend Fun fact: Varken is Dutch for pig. PIG is an acronym for Plex/InfluxDB/Grafana","title":"Description"},{"location":"apps/vsftpd/","text":"Vsftpd Description This Docker container implements a vsftpd server .","title":"Vsftpd"},{"location":"apps/vsftpd/#vsftpd","text":"","title":"Vsftpd"},{"location":"apps/vsftpd/#description","text":"This Docker container implements a vsftpd server .","title":"Description"},{"location":"apps/watchtower/","text":"Watchtower Description Watchtower can update the running version of your containerized app simply by pushing a new image to the Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially. Install/Setup Notifications You can use an override for notifications to your favorite method (E-mail, Slack/Discord, MS Teams are supported in Watchtower currently): You would want to put this in your override For Discord/Slack: watchtower : environment : - WATCHTOWER_NOTIFICATIONS=slack - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=https://url.discord.com/slack - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1 For E-Mail: watchtower : environment : - WATCHTOWER_NOTIFICATION_EMAIL_FROM=myemail@gmail.com - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=secretPassword - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587 - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=myemail@gmail.com - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com - WATCHTOWER_NOTIFICATION_EMAIL_TO=myemail@gmail.com - WATCHTOWER_NOTIFICATIONS=email This is what you could have had in your override previously : version : \"3.4\" # this must match the version in docker-compose.yml services : netdata : hostname : newhostname So now your override would look like this: version : \"3.4\" # this must match the version in docker-compose.yml services : netdata : hostname : newhostname watchtower : environment : - WATCHTOWER_NOTIFICATIONS=slack - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=https://url.discord.com/slack - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1","title":"Watchtower"},{"location":"apps/watchtower/#watchtower","text":"","title":"Watchtower"},{"location":"apps/watchtower/#description","text":"Watchtower can update the running version of your containerized app simply by pushing a new image to the Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially.","title":"Description"},{"location":"apps/watchtower/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/watchtower/#notifications","text":"You can use an override for notifications to your favorite method (E-mail, Slack/Discord, MS Teams are supported in Watchtower currently): You would want to put this in your override For Discord/Slack: watchtower : environment : - WATCHTOWER_NOTIFICATIONS=slack - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=https://url.discord.com/slack - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1 For E-Mail: watchtower : environment : - WATCHTOWER_NOTIFICATION_EMAIL_FROM=myemail@gmail.com - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=secretPassword - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587 - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=myemail@gmail.com - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com - WATCHTOWER_NOTIFICATION_EMAIL_TO=myemail@gmail.com - WATCHTOWER_NOTIFICATIONS=email This is what you could have had in your override previously : version : \"3.4\" # this must match the version in docker-compose.yml services : netdata : hostname : newhostname So now your override would look like this: version : \"3.4\" # this must match the version in docker-compose.yml services : netdata : hostname : newhostname watchtower : environment : - WATCHTOWER_NOTIFICATIONS=slack - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=https://url.discord.com/slack - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1","title":"Notifications"},{"location":"apps/xbackbone/","text":"XBackBone Description XBackBone is a simple and lightweight PHP file manager that support the instant sharing tool ShareX and *NIX systems. It supports uploading and displaying images, GIF, video, code, formatted text, pdf, and file downloading and uploading. Also have a web UI with multi user management, media gallery and search support. Install/Setup Common Issues After adding XBackBone and configuring the variables in your .env file when you try to access http://<hostname>:80 you get a Connection Timed Out error. Make sure to check the app logs by running: docker logs xbackbone If you see the following error: Executing /opt/docker/provision/entrypoint.d/01-app.sh PHP Fatal error: Uncaught PDOException: SQLSTATE [ HY000 ] [ 14 ] unable to open database file in /app/app/Database/DB.php:20 You need to update the permissions in your appdata folder for XBackBone. You can do so by running: sudo chown -R $USER : $USER ~/.config/appdata/xbackbone/ Restart your container by running: docker restart xbackbone","title":"XBackBone"},{"location":"apps/xbackbone/#xbackbone","text":"","title":"XBackBone"},{"location":"apps/xbackbone/#description","text":"XBackBone is a simple and lightweight PHP file manager that support the instant sharing tool ShareX and *NIX systems. It supports uploading and displaying images, GIF, video, code, formatted text, pdf, and file downloading and uploading. Also have a web UI with multi user management, media gallery and search support.","title":"Description"},{"location":"apps/xbackbone/#installsetup","text":"","title":"Install/Setup"},{"location":"apps/xbackbone/#common-issues","text":"After adding XBackBone and configuring the variables in your .env file when you try to access http://<hostname>:80 you get a Connection Timed Out error. Make sure to check the app logs by running: docker logs xbackbone If you see the following error: Executing /opt/docker/provision/entrypoint.d/01-app.sh PHP Fatal error: Uncaught PDOException: SQLSTATE [ HY000 ] [ 14 ] unable to open database file in /app/app/Database/DB.php:20 You need to update the permissions in your appdata folder for XBackBone. You can do so by running: sudo chown -R $USER : $USER ~/.config/appdata/xbackbone/ Restart your container by running: docker restart xbackbone","title":"Common Issues"},{"location":"apps/xteve/","text":"xTeVe Description xTeVe is a M3U proxy server for Plex, Emby and any client and provider which supports the .TS and .M3U8 (HLS) streaming formats. xTeVe emulates a SiliconDust HDHomeRun OTA tuner, which allows it to expose IPTV style channels to software, which would not normally support it.","title":"xTeVe"},{"location":"apps/xteve/#xteve","text":"","title":"xTeVe"},{"location":"apps/xteve/#description","text":"xTeVe is a M3U proxy server for Plex, Emby and any client and provider which supports the .TS and .M3U8 (HLS) streaming formats. xTeVe emulates a SiliconDust HDHomeRun OTA tuner, which allows it to expose IPTV style channels to software, which would not normally support it.","title":"Description"},{"location":"apps/youtubedl/","text":"youtubedl Description youtube-dl-server is very spartan Web and REST interface for downloading youtube videos onto a server. bottle + youtube-dl .","title":"youtubedl"},{"location":"apps/youtubedl/#youtubedl","text":"","title":"youtubedl"},{"location":"apps/youtubedl/#description","text":"youtube-dl-server is very spartan Web and REST interface for downloading youtube videos onto a server. bottle + youtube-dl .","title":"Description"},{"location":"apps/znc/","text":"ZNC Description ZNC is an IRC network bouncer or BNC. It can detach the client from the actual IRC server, and also from selected channels. Multiple clients from different locations can connect to a single ZNC account simultaneously and therefore appear under the same nickname on IRC.","title":"ZNC"},{"location":"apps/znc/#znc","text":"","title":"ZNC"},{"location":"apps/znc/#description","text":"ZNC is an IRC network bouncer or BNC. It can detach the client from the actual IRC server, and also from selected channels. Multiple clients from different locations can connect to a single ZNC account simultaneously and therefore appear under the same nickname on IRC.","title":"Description"},{"location":"basics/available-apps/","text":"Available Apps Please browse the repo here to see which apps are available: https://github.com/GhostWriters/DockSTARTer/tree/master/compose/.apps If an app folder exists then it is available for x86_64. Inside the folder will be files for ARMHF and AARCH64 if they are supported. You can see descriptions of each app in the GUI or in the labels yml file for each app in the repository.","title":"Available Apps"},{"location":"basics/available-apps/#available-apps","text":"Please browse the repo here to see which apps are available: https://github.com/GhostWriters/DockSTARTer/tree/master/compose/.apps If an app folder exists then it is available for x86_64. Inside the folder will be files for ARMHF and AARCH64 if they are supported. You can see descriptions of each app in the GUI or in the labels yml file for each app in the repository.","title":"Available Apps"},{"location":"basics/command-line-usage/","text":"Command Line Usage Assuming you already followed the installation steps in the readme, there are also a number of command line switches you can use with DockSTARTer. Command Line Switches Run The Install Script sudo ds -i This script does the following: Updates your system using apt-get Installs curl , git , grep , and sed (git should already be installed if you started with the install instructions on the main page, but it's here just in case) Installs yq - by downloading the binary from source and installing it locally, used for piecing together YAML files Installs docker - by downloading via the official docker-install script, used to run containers Installs docker machine completion - by downloading the binary from source and installing it locally, provides tab completion for docker in bash shell (just a nice extra to have) Installs docker-compose - by installing LSIO's helper script to run docker-compose from inside a docker container, allows configuring of containers to be run together instead of individually running each one Installs docker compose completion - by downloading the binary from source and installing it locally, provides tab completion for docker-compose in bash shell (just a nice extra to have) When the script finishes it will display a message informing you to reboot if this is the first time you've ran it. Run The Compose Generator sudo ds -c This script verifies the dependencies above and installs or updates them as needed, then creates a file ~/.docker/compose/docker-compose.yml based on the variables you configured in your ~/.docker/compose/.env file. The generator script will run your selected containers after creating the file. We encourage you to have a look at the generated docker-compose.yml file, however if you wish to make changes please consider using overrides. Please review the Technical Info and Overrides / Introduction pages. If you make any changes to your .env file (such as changing a port or enabling a new app) you need to rerun the generator which will rebuild only the affected containers. Update DockSTARTer sudo ds -u This should get you the latest changes to DockSTARTer. This will also backup and update your .env file. You may separately backup and update your .env file with the following command. sudo ds -e Then you may want to edit your .env file and run the generator again to bring up new apps or changes to existing apps. Setup Your Environment If you do not yet have a ~/.docker/compose/.env file: sudo ds -e Edit the file using something like nano ~/.docker/compose/.env (CTRL+X will prompt to save and exit the nano editor) Application Specific Variables Adding Apps You can add the variables required to run an app by running: sudo ds -a <APPNAME> ## Example: sudo ds -a sonarr Then your .env file fill have a variable named <APPNAME>_ENABLED that you can set to true and then run the Compose Generator to start the app. You may also need to fill in or adjust any other variables prefixed with the <APPNAME>_ that you're enabling. This is the best place to change the app's external default ports. Removing Apps You can remove the variables for an app by running: sudo ds -r <APPNAME> ## Example: sudo ds -r sonarr You can also remove all variables for all apps that are disabled by running: sudo ds -r You will be prompted individually for each app and shown what will be removed. Cleanup Unused Docker Resources sudo ds -p This cleans up the DS install, p stands for prune in this case. This recovers space from old images if they were somehow left over.","title":"Command Line Usage"},{"location":"basics/command-line-usage/#command-line-usage","text":"Assuming you already followed the installation steps in the readme, there are also a number of command line switches you can use with DockSTARTer.","title":"Command Line Usage"},{"location":"basics/command-line-usage/#command-line-switches","text":"","title":"Command Line Switches"},{"location":"basics/command-line-usage/#run-the-install-script","text":"sudo ds -i This script does the following: Updates your system using apt-get Installs curl , git , grep , and sed (git should already be installed if you started with the install instructions on the main page, but it's here just in case) Installs yq - by downloading the binary from source and installing it locally, used for piecing together YAML files Installs docker - by downloading via the official docker-install script, used to run containers Installs docker machine completion - by downloading the binary from source and installing it locally, provides tab completion for docker in bash shell (just a nice extra to have) Installs docker-compose - by installing LSIO's helper script to run docker-compose from inside a docker container, allows configuring of containers to be run together instead of individually running each one Installs docker compose completion - by downloading the binary from source and installing it locally, provides tab completion for docker-compose in bash shell (just a nice extra to have) When the script finishes it will display a message informing you to reboot if this is the first time you've ran it.","title":"Run The Install Script"},{"location":"basics/command-line-usage/#run-the-compose-generator","text":"sudo ds -c This script verifies the dependencies above and installs or updates them as needed, then creates a file ~/.docker/compose/docker-compose.yml based on the variables you configured in your ~/.docker/compose/.env file. The generator script will run your selected containers after creating the file. We encourage you to have a look at the generated docker-compose.yml file, however if you wish to make changes please consider using overrides. Please review the Technical Info and Overrides / Introduction pages. If you make any changes to your .env file (such as changing a port or enabling a new app) you need to rerun the generator which will rebuild only the affected containers.","title":"Run The Compose Generator"},{"location":"basics/command-line-usage/#update-dockstarter","text":"sudo ds -u This should get you the latest changes to DockSTARTer. This will also backup and update your .env file. You may separately backup and update your .env file with the following command. sudo ds -e Then you may want to edit your .env file and run the generator again to bring up new apps or changes to existing apps.","title":"Update DockSTARTer"},{"location":"basics/command-line-usage/#setup-your-environment","text":"If you do not yet have a ~/.docker/compose/.env file: sudo ds -e Edit the file using something like nano ~/.docker/compose/.env (CTRL+X will prompt to save and exit the nano editor)","title":"Setup Your Environment"},{"location":"basics/command-line-usage/#application-specific-variables","text":"","title":"Application Specific Variables"},{"location":"basics/command-line-usage/#adding-apps","text":"You can add the variables required to run an app by running: sudo ds -a <APPNAME> ## Example: sudo ds -a sonarr Then your .env file fill have a variable named <APPNAME>_ENABLED that you can set to true and then run the Compose Generator to start the app. You may also need to fill in or adjust any other variables prefixed with the <APPNAME>_ that you're enabling. This is the best place to change the app's external default ports.","title":"Adding Apps"},{"location":"basics/command-line-usage/#removing-apps","text":"You can remove the variables for an app by running: sudo ds -r <APPNAME> ## Example: sudo ds -r sonarr You can also remove all variables for all apps that are disabled by running: sudo ds -r You will be prompted individually for each app and shown what will be removed.","title":"Removing Apps"},{"location":"basics/command-line-usage/#cleanup-unused-docker-resources","text":"sudo ds -p This cleans up the DS install, p stands for prune in this case. This recovers space from old images if they were somehow left over.","title":"Cleanup Unused Docker Resources"},{"location":"basics/env-var-info/","text":".env Variable Info COMPOSE_HTTP_TIMEOUT Default value: 60 Description: See Compose HTTP Timeout This can be increased if you are seeing timeout issues when running compose. It is uncommon to need to adjust this option, but has been seen most commonly on very low powered CPU systems (older raspberry pi) or systems with failing storage (hard drives). DOCKERCONFDIR System Detected value: ~/.config/appdata Default value: ~/.config/appdata Description: This is the directory where all your containers' configuration is saved to. DOCKERGID System Detected value: The owner of the docker group on your system Default value: 999 Description: Default ID given to the docker group when it is created by Docker DOCKERHOSTNAME System Detected value: The hostname of your system Default value: DockSTARTer (because we don't want it to be accidentally blank) Description: All containers will default to having this hostname. DOCKERLOGGING_MAXFILE Default value: 10 Description: The maximum number of log files that can be present. If rolling the logs creates excess files, the oldest file is removed. DOCKERLOGGING_MAXSIZE Default value: 200k Description: The maximum size of the log before it is rotated. Size is specified in kilobytes. DOCKERSTORAGEDIR System Detected value: ~/storage Default value: ~/storage Description: This directory will be mounted under /storage inside every container across DS. There is no specific use for this directory, it can be used however you like. !DEPRECATED! DOWNLOADSDIR DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . Default value: /mnt/downloads Description: This directory will be mounted under /downloads inside any container that is used for downloading. Do not use this directory as permanent storage for your media. See below for MEDIADIR directories. NOTE: DOWNLOADSDIR also gets mounted to /data inside some containers because that is what binhex containers use. They will not work as intended otherwise. !DEPRECATED! MEDIADIR_AUDIOBOOKS DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Audioooks Default value: /mnt/medialibrary/audiobooks Description: This directory will be mounted under /audiobooks inside any container that is used to access your audiobooks library. This directory is meant to store media permanently. !DEPRECATED! MEDIADIR_BOOKS DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Books Default value: /mnt/medialibrary/books Description: This directory will be mounted under /books inside any container that is used to access your books library. This directory is meant to store media permanently. !DEPRECATED! MEDIADIR_COMICS DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Comics Default value: /mnt/medialibrary/comics Description: This directory will be mounted under /comics inside any container that is used to access your comics library. This directory is meant to store media permanently. !DEPRECATED! MEDIADIR_MOVIES DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Movies Default value: /mnt/medialibrary/movies Description: This directory will be mounted under /movies inside any container that is used to access your movie library. This directory is meant to store media permanently. !DEPRECATED! MEDIADIR_MUSIC DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Music Default value: /mnt/medialibrary/music Description: This directory will be mounted under /music inside any container that is used to access your music library. This directory is meant to store media permanently. !DEPRECATED! MEDIADIR_TV DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/TV Default value: /mnt/medialibrary/tv Description: This directory will be mounted under /tv inside any container that is used to access your TV library. This directory is meant to store media permanently. PGID System Detected value: Detects the ID of your group Default value: 1000 because this is the most common default on supported OS Description: This value can be obtained by using id -g $USER . PUID System Detected value: Detects the ID of your user Default value: 1000 because this is the most common default on supported OS Description: This value can be obtained by using id -u $USER . TZ System Detected value: Uses the value found in /etc/timezone Default value: America/Chicago because that's @nemchik's timezone (CST) Description: System timezone, see list of TZ Database Time Zones . LAN_NETWORK System Detected value: Detects your local IP range. Default value: 192.168.x.x/24 Description: If this value is blank or contains x DockSTARTer will automatically replace it with the System Detected value. Only accepts values in these ranges 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16. NS1 Default value: 1.1.1.1 Description: NS2 Default value: 8.8.8.8 Description: VPN_ENABLE Default value: yes Description: Only accepts yes or no . It specifies whether the VPN is enabled or not to be used by VPN enabled containers. VPN_OPTIONS Default value: Empty Description: VPN_OVPNDIR Default value: ~/.config/appdata/.openvpn Description: This directory will be used to store ovpn configurations that will be used by containers that are VPN enabled. VPN_PASS Default value: Empty Description: This is the password you use to login to your VPN provider. VPN_PROV Default value: custom Description: VPN_USER Default value: Empty Description: This is the username you use to login with to your VPN provider.","title":".env Variable Info"},{"location":"basics/env-var-info/#env-variable-info","text":"","title":".env Variable Info"},{"location":"basics/env-var-info/#compose_http_timeout","text":"Default value: 60 Description: See Compose HTTP Timeout This can be increased if you are seeing timeout issues when running compose. It is uncommon to need to adjust this option, but has been seen most commonly on very low powered CPU systems (older raspberry pi) or systems with failing storage (hard drives).","title":"COMPOSE_HTTP_TIMEOUT"},{"location":"basics/env-var-info/#dockerconfdir","text":"System Detected value: ~/.config/appdata Default value: ~/.config/appdata Description: This is the directory where all your containers' configuration is saved to.","title":"DOCKERCONFDIR"},{"location":"basics/env-var-info/#dockergid","text":"System Detected value: The owner of the docker group on your system Default value: 999 Description: Default ID given to the docker group when it is created by Docker","title":"DOCKERGID"},{"location":"basics/env-var-info/#dockerhostname","text":"System Detected value: The hostname of your system Default value: DockSTARTer (because we don't want it to be accidentally blank) Description: All containers will default to having this hostname.","title":"DOCKERHOSTNAME"},{"location":"basics/env-var-info/#dockerlogging_maxfile","text":"Default value: 10 Description: The maximum number of log files that can be present. If rolling the logs creates excess files, the oldest file is removed.","title":"DOCKERLOGGING_MAXFILE"},{"location":"basics/env-var-info/#dockerlogging_maxsize","text":"Default value: 200k Description: The maximum size of the log before it is rotated. Size is specified in kilobytes.","title":"DOCKERLOGGING_MAXSIZE"},{"location":"basics/env-var-info/#dockerstoragedir","text":"System Detected value: ~/storage Default value: ~/storage Description: This directory will be mounted under /storage inside every container across DS. There is no specific use for this directory, it can be used however you like.","title":"DOCKERSTORAGEDIR"},{"location":"basics/env-var-info/#deprecated-downloadsdir","text":"DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . Default value: /mnt/downloads Description: This directory will be mounted under /downloads inside any container that is used for downloading. Do not use this directory as permanent storage for your media. See below for MEDIADIR directories. NOTE: DOWNLOADSDIR also gets mounted to /data inside some containers because that is what binhex containers use. They will not work as intended otherwise.","title":"!DEPRECATED! DOWNLOADSDIR"},{"location":"basics/env-var-info/#deprecated-mediadir_audiobooks","text":"DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Audioooks Default value: /mnt/medialibrary/audiobooks Description: This directory will be mounted under /audiobooks inside any container that is used to access your audiobooks library. This directory is meant to store media permanently.","title":"!DEPRECATED! MEDIADIR_AUDIOBOOKS"},{"location":"basics/env-var-info/#deprecated-mediadir_books","text":"DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Books Default value: /mnt/medialibrary/books Description: This directory will be mounted under /books inside any container that is used to access your books library. This directory is meant to store media permanently.","title":"!DEPRECATED! MEDIADIR_BOOKS"},{"location":"basics/env-var-info/#deprecated-mediadir_comics","text":"DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Comics Default value: /mnt/medialibrary/comics Description: This directory will be mounted under /comics inside any container that is used to access your comics library. This directory is meant to store media permanently.","title":"!DEPRECATED! MEDIADIR_COMICS"},{"location":"basics/env-var-info/#deprecated-mediadir_movies","text":"DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Movies Default value: /mnt/medialibrary/movies Description: This directory will be mounted under /movies inside any container that is used to access your movie library. This directory is meant to store media permanently.","title":"!DEPRECATED! MEDIADIR_MOVIES"},{"location":"basics/env-var-info/#deprecated-mediadir_music","text":"DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/Music Default value: /mnt/medialibrary/music Description: This directory will be mounted under /music inside any container that is used to access your music library. This directory is meant to store media permanently.","title":"!DEPRECATED! MEDIADIR_MUSIC"},{"location":"basics/env-var-info/#deprecated-mediadir_tv","text":"DEPRECATION NOTICE: This variable is now deprecated in favor of DOCKERSTORAGEDIR which is mounted as a volume in all containers as /storage . This variable will be completely removed from all DockSTARTer app templates and no longer mounted as a volume at the end of 2020. The variable will not be removed from your .env file, however it will be sorted into the application specific variables at the bottom. If you require the volume you can continue using it via an override . System Detected value: ~/TV Default value: /mnt/medialibrary/tv Description: This directory will be mounted under /tv inside any container that is used to access your TV library. This directory is meant to store media permanently.","title":"!DEPRECATED! MEDIADIR_TV"},{"location":"basics/env-var-info/#pgid","text":"System Detected value: Detects the ID of your group Default value: 1000 because this is the most common default on supported OS Description: This value can be obtained by using id -g $USER .","title":"PGID"},{"location":"basics/env-var-info/#puid","text":"System Detected value: Detects the ID of your user Default value: 1000 because this is the most common default on supported OS Description: This value can be obtained by using id -u $USER .","title":"PUID"},{"location":"basics/env-var-info/#tz","text":"System Detected value: Uses the value found in /etc/timezone Default value: America/Chicago because that's @nemchik's timezone (CST) Description: System timezone, see list of TZ Database Time Zones .","title":"TZ"},{"location":"basics/env-var-info/#lan_network","text":"System Detected value: Detects your local IP range. Default value: 192.168.x.x/24 Description: If this value is blank or contains x DockSTARTer will automatically replace it with the System Detected value. Only accepts values in these ranges 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16.","title":"LAN_NETWORK"},{"location":"basics/env-var-info/#ns1","text":"Default value: 1.1.1.1 Description:","title":"NS1"},{"location":"basics/env-var-info/#ns2","text":"Default value: 8.8.8.8 Description:","title":"NS2"},{"location":"basics/env-var-info/#vpn_enable","text":"Default value: yes Description: Only accepts yes or no . It specifies whether the VPN is enabled or not to be used by VPN enabled containers.","title":"VPN_ENABLE"},{"location":"basics/env-var-info/#vpn_options","text":"Default value: Empty Description:","title":"VPN_OPTIONS"},{"location":"basics/env-var-info/#vpn_ovpndir","text":"Default value: ~/.config/appdata/.openvpn Description: This directory will be used to store ovpn configurations that will be used by containers that are VPN enabled.","title":"VPN_OVPNDIR"},{"location":"basics/env-var-info/#vpn_pass","text":"Default value: Empty Description: This is the password you use to login to your VPN provider.","title":"VPN_PASS"},{"location":"basics/env-var-info/#vpn_prov","text":"Default value: custom Description:","title":"VPN_PROV"},{"location":"basics/env-var-info/#vpn_user","text":"Default value: Empty Description: This is the username you use to login with to your VPN provider.","title":"VPN_USER"},{"location":"basics/faq/","text":"FAQ Support Refer to our Support Page for our Support Channels and Tutorials we have found users have made with DockSTARTer! Relocating appdata For new installs the default DOCKERCONFDIR is ~/.config/appdata . Users who ran DockSTARTer before this location became the default may have ~/.docker/config , and we advise relocating. If you'd like to move your existing config to a new location you can do the following: Edit ~/. docker/compose/.env (in any text editor) and set DOCKERCONFDIR = ~/.config/appdata (You can choose anywhere to save configs, this example only shows the default location). Then run the following commands: ds -u ds -c down # Move your current config folder to the new location, ex: sudo mv ~/.docker/config ~/.config/appdata ds -c That's it! Your containers should fire right back up as if nothing has changed. If you have any issues feel free to ask for help in #ds-support Ouroboros or Watchtower Enabled By Default This tool is extremely useful for people getting used to running Docker. Its official documentation should explain why but you can disable it if you want. Ouroboros will monitor (all or specified) running Docker containers and update them to the (latest or tagged) available image in the remote registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially. In short, Ouroboros and Watchtower do the same thing: keeps your containers up to date. Ouroboros/Watchtower FAQ When I run ds -c and it recreates some of the containers, is that because they have had updates from last run With Ouroboros (or Watchtower) your containers will be updated to the latest images automatically. However, docker-compose has no idea what's updated, docker-compose keeps track of things independently from Ouroboros/Watchtower. Additionally, Ouroboros/Watchtower doesn't update docker-compose's method of tracking, therefore, compose might \"recreate\" containers that are already up to date. This is not a big deal it's basically just a container restart, and you were planning on running ds -c expecting some kind of updates anyway. General troubleshooting help You can see the (quite helpful) logs of each container with the docker logs <appname> command. Additionally, you can also use Dozzle if you prefer to view logs using your browser. Reported Issues Creating network \"compose_default\" with the default driver ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network This error can occur if your connected to a VPN while setting up the containers. Simply temporarily disconnect your VPN connection until the containers have been created and then reconnect again. Starting containers and getting the following or a similar error message: \"listen udp 0.0.0.0:5353: bind: address already in use\" As you could probably guess this means an application (most likely Plex) is trying to use a port that is already in use. You can check which application it is with: sudo lsof -i :<myport> So in this example it would be: sudo lsof -i :5353 which will show you that Google Chrome is using the port you need. In this case you could just close Chrome, but there may be applications you need to uninstall for this to work properly.","title":"FAQ"},{"location":"basics/faq/#faq","text":"","title":"FAQ"},{"location":"basics/faq/#support","text":"Refer to our Support Page for our Support Channels and Tutorials we have found users have made with DockSTARTer!","title":"Support"},{"location":"basics/faq/#relocating-appdata","text":"For new installs the default DOCKERCONFDIR is ~/.config/appdata . Users who ran DockSTARTer before this location became the default may have ~/.docker/config , and we advise relocating. If you'd like to move your existing config to a new location you can do the following: Edit ~/. docker/compose/.env (in any text editor) and set DOCKERCONFDIR = ~/.config/appdata (You can choose anywhere to save configs, this example only shows the default location). Then run the following commands: ds -u ds -c down # Move your current config folder to the new location, ex: sudo mv ~/.docker/config ~/.config/appdata ds -c That's it! Your containers should fire right back up as if nothing has changed. If you have any issues feel free to ask for help in #ds-support","title":"Relocating appdata"},{"location":"basics/faq/#ouroboros-or-watchtower-enabled-by-default","text":"This tool is extremely useful for people getting used to running Docker. Its official documentation should explain why but you can disable it if you want. Ouroboros will monitor (all or specified) running Docker containers and update them to the (latest or tagged) available image in the remote registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially. In short, Ouroboros and Watchtower do the same thing: keeps your containers up to date.","title":"Ouroboros or Watchtower Enabled By Default"},{"location":"basics/faq/#ouroboroswatchtower-faq","text":"","title":"Ouroboros/Watchtower FAQ"},{"location":"basics/faq/#when-i-run-ds-c-and-it-recreates-some-of-the-containers-is-that-because-they-have-had-updates-from-last-run","text":"With Ouroboros (or Watchtower) your containers will be updated to the latest images automatically. However, docker-compose has no idea what's updated, docker-compose keeps track of things independently from Ouroboros/Watchtower. Additionally, Ouroboros/Watchtower doesn't update docker-compose's method of tracking, therefore, compose might \"recreate\" containers that are already up to date. This is not a big deal it's basically just a container restart, and you were planning on running ds -c expecting some kind of updates anyway.","title":"When I run ds -c and it recreates some of the containers, is that because they have had updates from last run"},{"location":"basics/faq/#general-troubleshooting-help","text":"You can see the (quite helpful) logs of each container with the docker logs <appname> command. Additionally, you can also use Dozzle if you prefer to view logs using your browser.","title":"General troubleshooting help"},{"location":"basics/faq/#reported-issues","text":"","title":"Reported Issues"},{"location":"basics/faq/#creating-network-compose_default-with-the-default-driver-error-could-not-find-an-available-non-overlapping-ipv4-address-pool-among-the-defaults-to-assign-to-the-network","text":"This error can occur if your connected to a VPN while setting up the containers. Simply temporarily disconnect your VPN connection until the containers have been created and then reconnect again.","title":"Creating network \"compose_default\" with the default driver ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network"},{"location":"basics/faq/#starting-containers-and-getting-the-following-or-a-similar-error-message-listen-udp-00005353-bind-address-already-in-use","text":"As you could probably guess this means an application (most likely Plex) is trying to use a port that is already in use. You can check which application it is with: sudo lsof -i :<myport> So in this example it would be: sudo lsof -i :5353 which will show you that Google Chrome is using the port you need. In this case you could just close Chrome, but there may be applications you need to uninstall for this to work properly.","title":"Starting containers and getting the following or a similar error message: \"listen udp 0.0.0.0:5353: bind: address already in use\""},{"location":"basics/migration/","text":"Migration From local installs Stop the service for the existing app (so that ports are available) Start the app using DockSTARTer so that the config folder structure is created ( ~/.config/appdata/appname by default) Stop the app's docker container ( docker stop appname ) Locate the config of the local installation and copy it to ~/.config/appdata/appname (only grab the required files) Start the app ( sudo ds -c ) Inside the app's config, or settings web interface, adjust the folder locations that make use of files on the disk to match the docker volumes for the container Adjust the app config to communicate with other existing apps (both in and out of docker as needed) Optionally uninstall/remove original app and dependencies From other Docker containers Stop the app's old docker container Start the app using DockSTARTer so that the config folder structure is created ( ~/.config/appdata/appname by default) Stop the app's new docker container ( docker stop appname ) Locate the config of the old docker container and copy it to ~/.config/appdata/appname (only grab the required files) Start the app ( sudo ds -c ) Inside the app's config, or settings web interface, adjust the folder locations that make use of files on the disk to match the docker volumes for the new container Adjust the app config to communicate with other existing apps (both in and out of docker as needed) Remove the app's old docker container Example Sonarr's config is commonly found in ~/.config/NzbDrone . Following the instructions above, all files in ~/.config/NzbDrone would be copied to ~/.config/appdata/sonarr . After starting the new Sonarr in Docker, modify the Root Folder settings to tell Sonarr where your files are. DockSTARTer maps the true location of your media folders to locations the container expects to see such as /tv in the case of Sonarr, so that is where you will set your root folder. You will also need to modify your settings that have Sonarr connect to other apps such as Usenet or Torrent download clients. Rather than an IP address or localhost you would just use the name of the download client app, ex: nzbget as the hostname. The same would apply for any connections between any app.","title":"Migration"},{"location":"basics/migration/#migration","text":"","title":"Migration"},{"location":"basics/migration/#from-local-installs","text":"Stop the service for the existing app (so that ports are available) Start the app using DockSTARTer so that the config folder structure is created ( ~/.config/appdata/appname by default) Stop the app's docker container ( docker stop appname ) Locate the config of the local installation and copy it to ~/.config/appdata/appname (only grab the required files) Start the app ( sudo ds -c ) Inside the app's config, or settings web interface, adjust the folder locations that make use of files on the disk to match the docker volumes for the container Adjust the app config to communicate with other existing apps (both in and out of docker as needed) Optionally uninstall/remove original app and dependencies","title":"From local installs"},{"location":"basics/migration/#from-other-docker-containers","text":"Stop the app's old docker container Start the app using DockSTARTer so that the config folder structure is created ( ~/.config/appdata/appname by default) Stop the app's new docker container ( docker stop appname ) Locate the config of the old docker container and copy it to ~/.config/appdata/appname (only grab the required files) Start the app ( sudo ds -c ) Inside the app's config, or settings web interface, adjust the folder locations that make use of files on the disk to match the docker volumes for the new container Adjust the app config to communicate with other existing apps (both in and out of docker as needed) Remove the app's old docker container","title":"From other Docker containers"},{"location":"basics/migration/#example","text":"Sonarr's config is commonly found in ~/.config/NzbDrone . Following the instructions above, all files in ~/.config/NzbDrone would be copied to ~/.config/appdata/sonarr . After starting the new Sonarr in Docker, modify the Root Folder settings to tell Sonarr where your files are. DockSTARTer maps the true location of your media folders to locations the container expects to see such as /tv in the case of Sonarr, so that is where you will set your root folder. You will also need to modify your settings that have Sonarr connect to other apps such as Usenet or Torrent download clients. Rather than an IP address or localhost you would just use the name of the download client app, ex: nzbget as the hostname. The same would apply for any connections between any app.","title":"Example"},{"location":"basics/port-conflicts/","text":"Port Conflicts Issue/Problem During configuration the script exits with an error like the following: ERROR: for plex cannot start service plex: driver failed programming external connectivity on endpoint plex (5a4d78fd5ff6c4c1a978ef31): Error starting userland proxy: listen udp 0.0.0.0:5353: bind: address already in use ERROR: Encountered errors while bringing up the project. 2019-02-13 17:38:19 [FATAL] Docker Compose failed. This is due to another service that has occupied that port disallowing DockSTARTer from installing a service on that port. Troubleshooting Methods As DockSTARTer will check and fail if another service is occupying the port, it is necessary to locate and deal with the conflict. One way is to locate the service currently occupying the port. You can do the following: # sudo netstat -ltunp | grep -w ':<port>' ## Example: sudo netstat -ltunp | grep -w ':8080' Once you locate the offending service then you can choose what to do. Resolutions/Solutions Example: If you have avahi-daemon installed this will conflict with udp/5353 port usage for iTunes in Plex if selected. This will cause the script to exit with an [ERROR] and a [FATAL]. One resolution is to change the port being bound during configuration. During configuration change the external port exposed from 5353 to 5354 (or another unused port) . This will resolve the conflict. Another resolution would be to remove the software that is in conflict. Again as the example above. If you are not using mDNS resolution then avahi-daemon would be unnecessary. Simply remove the package with apt remove avahi-daemon from the base server. This will remove the offending service and allow the port to be used by the Docker service.","title":"Port Conflicts"},{"location":"basics/port-conflicts/#port-conflicts","text":"","title":"Port Conflicts"},{"location":"basics/port-conflicts/#issueproblem","text":"During configuration the script exits with an error like the following: ERROR: for plex cannot start service plex: driver failed programming external connectivity on endpoint plex (5a4d78fd5ff6c4c1a978ef31): Error starting userland proxy: listen udp 0.0.0.0:5353: bind: address already in use ERROR: Encountered errors while bringing up the project. 2019-02-13 17:38:19 [FATAL] Docker Compose failed. This is due to another service that has occupied that port disallowing DockSTARTer from installing a service on that port.","title":"Issue/Problem"},{"location":"basics/port-conflicts/#troubleshooting-methods","text":"As DockSTARTer will check and fail if another service is occupying the port, it is necessary to locate and deal with the conflict. One way is to locate the service currently occupying the port. You can do the following: # sudo netstat -ltunp | grep -w ':<port>' ## Example: sudo netstat -ltunp | grep -w ':8080' Once you locate the offending service then you can choose what to do.","title":"Troubleshooting Methods"},{"location":"basics/port-conflicts/#resolutionssolutions","text":"Example: If you have avahi-daemon installed this will conflict with udp/5353 port usage for iTunes in Plex if selected. This will cause the script to exit with an [ERROR] and a [FATAL]. One resolution is to change the port being bound during configuration. During configuration change the external port exposed from 5353 to 5354 (or another unused port) . This will resolve the conflict. Another resolution would be to remove the software that is in conflict. Again as the example above. If you are not using mDNS resolution then avahi-daemon would be unnecessary. Simply remove the package with apt remove avahi-daemon from the base server. This will remove the offending service and allow the port to be used by the Docker service.","title":"Resolutions/Solutions"},{"location":"basics/support/","text":"Support Official Support Click the chat badge to join us on Discord for support! Also check out our subreddit, /r/DockSTARTer Submit a Feature Request Submit a Bug Report External Information Below you will find links to various tutorial videos, blogs, and guides users have made. DBTech.com - Raspberry Pi 4: Ultimate Home Server with DockerSTARTer Blog Post & Video Tutorial MakeUseOf.com - How to Set Up a Linux Media Server in Under One Hour Tutorial Borked.io - Docker In Your HomeLab - Getting Started Tutorial Servermania.com - How to Setup and Use a Plex Media Server for Movies and TV Tutorial","title":"Support"},{"location":"basics/support/#support","text":"","title":"Support"},{"location":"basics/support/#official-support","text":"Click the chat badge to join us on Discord for support! Also check out our subreddit, /r/DockSTARTer Submit a Feature Request Submit a Bug Report","title":"Official Support"},{"location":"basics/support/#external-information","text":"Below you will find links to various tutorial videos, blogs, and guides users have made. DBTech.com - Raspberry Pi 4: Ultimate Home Server with DockerSTARTer Blog Post & Video Tutorial MakeUseOf.com - How to Set Up a Linux Media Server in Under One Hour Tutorial Borked.io - Docker In Your HomeLab - Getting Started Tutorial Servermania.com - How to Setup and Use a Plex Media Server for Movies and TV Tutorial","title":"External Information"},{"location":"overrides/autoscan/","text":"Autoscan Description Autoscan replaces the default Plex and Emby behaviour for picking up changes on the file system. Install/Setup Example Docker Compose Override version : \"3.4\" services : autoscan : image : cloudb0x/autoscan hostname : ${DOCKERHOSTNAME} ports : - 3030:3030 container_name : autoscan environment : - AUTOSCAN_VERBOSITY=0 - PGID=${PGID} - PUID=${PUID} - TZ=${TZ} logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - /mnt/remote:/mnt/remote:ro - /opt/sa:/opt/sa - ${DOCKERCONFDIR}/autoscan:/config - ${DOCKERSTORAGEDIR}:/storage","title":"Autoscan"},{"location":"overrides/autoscan/#autoscan","text":"","title":"Autoscan"},{"location":"overrides/autoscan/#description","text":"Autoscan replaces the default Plex and Emby behaviour for picking up changes on the file system.","title":"Description"},{"location":"overrides/autoscan/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/autoscan/#example-docker-compose-override","text":"version : \"3.4\" services : autoscan : image : cloudb0x/autoscan hostname : ${DOCKERHOSTNAME} ports : - 3030:3030 container_name : autoscan environment : - AUTOSCAN_VERBOSITY=0 - PGID=${PGID} - PUID=${PUID} - TZ=${TZ} logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - /mnt/remote:/mnt/remote:ro - /opt/sa:/opt/sa - ${DOCKERCONFDIR}/autoscan:/config - ${DOCKERSTORAGEDIR}:/storage","title":"Example Docker Compose Override"},{"location":"overrides/bw_plex/","text":"bw_plex Description bw_plex is a tool for skipping intro and outro for plex. Install/Setup ENV Variable The bw_plex override uses Variables that you will need to update your .env with the below example. BW_PLEX_TOKEN=your_plex_x_token BW_PLEX_URL=http://plex:32400 Example Docker Compose Override version : \"3.4\" services : bw_plex : image : hellowlol/bw_plex container_name : bw_plex restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/bw_plex:/config - ${DOCKERSTORAGEDIR}:/storage command : bw_plex --url ${BW_PLEX_URL} -t ${BW_PLEX_TOKEN} -df /config watch","title":"bw_plex"},{"location":"overrides/bw_plex/#bw_plex","text":"","title":"bw_plex"},{"location":"overrides/bw_plex/#description","text":"bw_plex is a tool for skipping intro and outro for plex.","title":"Description"},{"location":"overrides/bw_plex/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/bw_plex/#env-variable","text":"The bw_plex override uses Variables that you will need to update your .env with the below example. BW_PLEX_TOKEN=your_plex_x_token BW_PLEX_URL=http://plex:32400","title":"ENV Variable"},{"location":"overrides/bw_plex/#example-docker-compose-override","text":"version : \"3.4\" services : bw_plex : image : hellowlol/bw_plex container_name : bw_plex restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/bw_plex:/config - ${DOCKERSTORAGEDIR}:/storage command : bw_plex --url ${BW_PLEX_URL} -t ${BW_PLEX_TOKEN} -df /config watch","title":"Example Docker Compose Override"},{"location":"overrides/dashmachine/","text":"Dashmachine Description Dashmachine is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat. Current platform is Discord only, but the bot was built around the ideology of quick adaptation for new features as well as new platforms. Install/Setup Example Docker Compose Override version : \"3.4\" services : dashmachine : container_name : dashmachine hostname : ${DOCKERHOSTNAME} image : rmountjoy/dashmachine logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 5002:5000 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/dashmachine:/DashMachine/dashmachine/user_data - ${DOCKERSTORAGEDIR}:/storage","title":"Dashmachine"},{"location":"overrides/dashmachine/#dashmachine","text":"","title":"Dashmachine"},{"location":"overrides/dashmachine/#description","text":"Dashmachine is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat. Current platform is Discord only, but the bot was built around the ideology of quick adaptation for new features as well as new platforms.","title":"Description"},{"location":"overrides/dashmachine/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/dashmachine/#example-docker-compose-override","text":"version : \"3.4\" services : dashmachine : container_name : dashmachine hostname : ${DOCKERHOSTNAME} image : rmountjoy/dashmachine logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 5002:5000 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/dashmachine:/DashMachine/dashmachine/user_data - ${DOCKERSTORAGEDIR}:/storage","title":"Example Docker Compose Override"},{"location":"overrides/fireflyiii/","text":"Firefly III Description Firefly III is a personal finances manager. Install/Setup Example Docker Compose Override version : \"3.4\" services : fireflyiii : container_name : fireflyiii environment : - APP_KEY=CHANGEME_32_CHARS - APP_URL=https://fireflyiii.mydomain.com - DB_CONNECTION=mysql - DB_DATABASE=fireflyiii_db - DB_HOST=mariadb - DB_PASSWORD=fireflyiii_password - DB_PORT=3306 - DB_USERNAME=fireflyiii_user - TRUSTED_PROXIES=** - TZ=${TZ} hostname : ${DOCKERHOSTNAME} image : jc5x/firefly-iii logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 8001:80 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/fireflyiii/export:/var/www/firefly-iii/storage/export - ${DOCKERCONFDIR}/fireflyiii/upload:/var/www/firefly-iii/storage/upload - ${DOCKERSTORAGEDIR}:/storage","title":"Firefly III"},{"location":"overrides/fireflyiii/#firefly-iii","text":"","title":"Firefly III"},{"location":"overrides/fireflyiii/#description","text":"Firefly III is a personal finances manager.","title":"Description"},{"location":"overrides/fireflyiii/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/fireflyiii/#example-docker-compose-override","text":"version : \"3.4\" services : fireflyiii : container_name : fireflyiii environment : - APP_KEY=CHANGEME_32_CHARS - APP_URL=https://fireflyiii.mydomain.com - DB_CONNECTION=mysql - DB_DATABASE=fireflyiii_db - DB_HOST=mariadb - DB_PASSWORD=fireflyiii_password - DB_PORT=3306 - DB_USERNAME=fireflyiii_user - TRUSTED_PROXIES=** - TZ=${TZ} hostname : ${DOCKERHOSTNAME} image : jc5x/firefly-iii logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 8001:80 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/fireflyiii/export:/var/www/firefly-iii/storage/export - ${DOCKERCONFDIR}/fireflyiii/upload:/var/www/firefly-iii/storage/upload - ${DOCKERSTORAGEDIR}:/storage","title":"Example Docker Compose Override"},{"location":"overrides/introduction/","text":"Overrides Intro The YML files included with and generated by DockSTARTer are NOT meant to be modified. Updating DockSTARTer will overwrite the YML files in ~/.docker/compose/.apps/ . The ~/.docker/compose/docker-compose.yml file is generated and rewritten by DockSTARTer when you use the Configuration menu or run sudo ds -c . If you would like to make some adjustments the best way is to use a docker-compose.override.yml file. Docker Compose will look for ~/.docker/compose/docker-compose.override.yml . Anything you set in this file will be merged in and take priority over the regular configurations. 2 Types of Overrides You can use overrides to modify existing apps (such as changing which image an app uses) or adding all the compose configurations needed to run an entirely new app that's not included in DockSTARTer. The below example will change Sonarr to use hotio's image for Sonarr and add a /media volume. Everything else from the original config such as the remaining volumes and environment variables will merge together. Partial Override Merge Example version : \"3.4\" # this must match the version in docker-compose.yml services : sonarr : image : hotio/sonarr volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/sonarr:/config - ${DOCKERSTORAGEDIR}:/storage The below example will use the override file to add a app that is not in DS already. This option will need all required docker compose yaml code for the specific app. Full App Override Example version : \"3.4\" # this must match the version in docker-compose.yml services : alltube : container_name : alltube environment : - PGID=1000 - PUID=1000 image : rudloff/alltube logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - \"1234:80\" restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/alltube:/var/www/html/config - ${DOCKERSTORAGEDIR}:/storage Make sure to run ds -c or ds -c up <appname> after you make changes to your override file","title":"Overrides Intro"},{"location":"overrides/introduction/#overrides-intro","text":"The YML files included with and generated by DockSTARTer are NOT meant to be modified. Updating DockSTARTer will overwrite the YML files in ~/.docker/compose/.apps/ . The ~/.docker/compose/docker-compose.yml file is generated and rewritten by DockSTARTer when you use the Configuration menu or run sudo ds -c . If you would like to make some adjustments the best way is to use a docker-compose.override.yml file. Docker Compose will look for ~/.docker/compose/docker-compose.override.yml . Anything you set in this file will be merged in and take priority over the regular configurations.","title":"Overrides Intro"},{"location":"overrides/introduction/#2-types-of-overrides","text":"You can use overrides to modify existing apps (such as changing which image an app uses) or adding all the compose configurations needed to run an entirely new app that's not included in DockSTARTer. The below example will change Sonarr to use hotio's image for Sonarr and add a /media volume. Everything else from the original config such as the remaining volumes and environment variables will merge together.","title":"2 Types of Overrides"},{"location":"overrides/introduction/#partial-override-merge-example","text":"version : \"3.4\" # this must match the version in docker-compose.yml services : sonarr : image : hotio/sonarr volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/sonarr:/config - ${DOCKERSTORAGEDIR}:/storage The below example will use the override file to add a app that is not in DS already. This option will need all required docker compose yaml code for the specific app.","title":"Partial Override Merge Example"},{"location":"overrides/introduction/#full-app-override-example","text":"version : \"3.4\" # this must match the version in docker-compose.yml services : alltube : container_name : alltube environment : - PGID=1000 - PUID=1000 image : rudloff/alltube logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - \"1234:80\" restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/alltube:/var/www/html/config - ${DOCKERSTORAGEDIR}:/storage","title":"Full App Override Example"},{"location":"overrides/introduction/#make-sure-to-run-ds-c-or-ds-c-up-appname-after-you-make-changes-to-your-override-file","text":"","title":"Make sure to run ds -c or ds -c up &lt;appname&gt; after you make changes to your override file"},{"location":"overrides/kitana/","text":"Kitana Description Kitana is a responsive Plex plugin web frontend. Install/Setup Example Docker Compose Override version : \"3.4\" services : kitana : container_name : kitana environment : - TZ=${TZ} image : pannal/kitana logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 31337:31337 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/kitana:/app/data - ${DOCKERSTORAGEDIR}:/storage","title":"Kitana"},{"location":"overrides/kitana/#kitana","text":"","title":"Kitana"},{"location":"overrides/kitana/#description","text":"Kitana is a responsive Plex plugin web frontend.","title":"Description"},{"location":"overrides/kitana/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/kitana/#example-docker-compose-override","text":"version : \"3.4\" services : kitana : container_name : kitana environment : - TZ=${TZ} image : pannal/kitana logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 31337:31337 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/kitana:/app/data - ${DOCKERSTORAGEDIR}:/storage","title":"Example Docker Compose Override"},{"location":"overrides/nginxproxymanager/","text":"Nginx Proxy Manager Description Nginx Proxy Manager is a Docker container for managing Nginx proxy hosts and SSL Certificates with a simple, powerful interface. Install/Setup Config File Nginx Proxy Manager requires a Configuration file named config.json . This file needs to be in the appdata folder for NPM before it is started. { \"database\" : { \"engine\" : \"mysql\" , \"host\" : \"db\" , \"name\" : \"npm\" , \"user\" : \"npm\" , \"password\" : \"npm\" , \"port\" : \"3306\" } } Example Docker Compose Override version : \"3.4\" services : proxymanager : image : jc21/nginx-proxy-manager:latest container_name : proxymanager logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - \"80:80\" - \"81:81\" - \"443:443\" restart : unless-stopped volumes : - ${DOCKERCONFDIR}/proxymanager/config.json:/app/config/config.json - ${DOCKERCONFDIR}/proxymanager/data:/data - ${DOCKERCONFDIR}/proxymanager/letsencrypt:/etc/letsencrypt - ${DOCKERSTORAGEDIR}:/storage","title":"Nginx Proxy Manager"},{"location":"overrides/nginxproxymanager/#nginx-proxy-manager","text":"","title":"Nginx Proxy Manager"},{"location":"overrides/nginxproxymanager/#description","text":"Nginx Proxy Manager is a Docker container for managing Nginx proxy hosts and SSL Certificates with a simple, powerful interface.","title":"Description"},{"location":"overrides/nginxproxymanager/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/nginxproxymanager/#config-file","text":"Nginx Proxy Manager requires a Configuration file named config.json . This file needs to be in the appdata folder for NPM before it is started. { \"database\" : { \"engine\" : \"mysql\" , \"host\" : \"db\" , \"name\" : \"npm\" , \"user\" : \"npm\" , \"password\" : \"npm\" , \"port\" : \"3306\" } }","title":"Config File"},{"location":"overrides/nginxproxymanager/#example-docker-compose-override","text":"version : \"3.4\" services : proxymanager : image : jc21/nginx-proxy-manager:latest container_name : proxymanager logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - \"80:80\" - \"81:81\" - \"443:443\" restart : unless-stopped volumes : - ${DOCKERCONFDIR}/proxymanager/config.json:/app/config/config.json - ${DOCKERCONFDIR}/proxymanager/data:/data - ${DOCKERCONFDIR}/proxymanager/letsencrypt:/etc/letsencrypt - ${DOCKERSTORAGEDIR}:/storage","title":"Example Docker Compose Override"},{"location":"overrides/plpp/","text":"PLPP Description PHP Library Presenter for PLEX provides a PHP front end to simply present PLEX libraries on the web without the possibility to play or download the library items. Currently movie/home video, TV show, music and photo/picture libraries are supported. Install/Setup Example Docker Compose Override version : \"3.4\" services : plpp : container_name : plpp environment : - PGID=${PGID} - PUID=${PUID} - TZ=${TZ} hostname : ${DOCKERHOSTNAME} image : tronyx/docker-plpp logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 8383:80 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/plpp:/config - ${DOCKERSTORAGEDIR}:/storage","title":"PLPP"},{"location":"overrides/plpp/#plpp","text":"","title":"PLPP"},{"location":"overrides/plpp/#description","text":"PHP Library Presenter for PLEX provides a PHP front end to simply present PLEX libraries on the web without the possibility to play or download the library items. Currently movie/home video, TV show, music and photo/picture libraries are supported.","title":"Description"},{"location":"overrides/plpp/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/plpp/#example-docker-compose-override","text":"version : \"3.4\" services : plpp : container_name : plpp environment : - PGID=${PGID} - PUID=${PUID} - TZ=${TZ} hostname : ${DOCKERHOSTNAME} image : tronyx/docker-plpp logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 8383:80 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/plpp:/config - ${DOCKERSTORAGEDIR}:/storage","title":"Example Docker Compose Override"},{"location":"overrides/requestrr/","text":"Requestrr Description Requestrr is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat. Current platform is Discord only, but the bot was built around the ideology of quick adaptation for new features as well as new platforms. Install/Setup Example Docker Compose Override version : \"3.4\" services : requestrr : container_name : requestrr environment : - TZ=${TZ} image : darkalfx/requestrr logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 4545:4545 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/requestrr:/root/config - ${DOCKERSTORAGEDIR}:/storage","title":"Requestrr"},{"location":"overrides/requestrr/#requestrr","text":"","title":"Requestrr"},{"location":"overrides/requestrr/#description","text":"Requestrr is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat. Current platform is Discord only, but the bot was built around the ideology of quick adaptation for new features as well as new platforms.","title":"Description"},{"location":"overrides/requestrr/#installsetup","text":"","title":"Install/Setup"},{"location":"overrides/requestrr/#example-docker-compose-override","text":"version : \"3.4\" services : requestrr : container_name : requestrr environment : - TZ=${TZ} image : darkalfx/requestrr logging : driver : json-file options : max-file : ${DOCKERLOGGING_MAXFILE} max-size : ${DOCKERLOGGING_MAXSIZE} ports : - 4545:4545 restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/requestrr:/root/config - ${DOCKERSTORAGEDIR}:/storage","title":"Example Docker Compose Override"},{"location":"overrides/yacreader/","text":"YACReader Server Description YACReader is for Reading, Browsing, And Managing your Digital Comics Collection. Example Docker Compose Override version : \"3.4\" # this must match the version in docker-compose.yml services : yacreaderlibraryserver : image : muallin/yacreaderlibrary-server-docker container_name : yacreaderlibraryserver restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/yacreaderlibraryserver:/config - ${DOCKERSTORAGEDIR}:/storage ports : - \"8080:8080\"","title":"YACReader Server"},{"location":"overrides/yacreader/#yacreader-server","text":"","title":"YACReader Server"},{"location":"overrides/yacreader/#description","text":"YACReader is for Reading, Browsing, And Managing your Digital Comics Collection.","title":"Description"},{"location":"overrides/yacreader/#example-docker-compose-override","text":"version : \"3.4\" # this must match the version in docker-compose.yml services : yacreaderlibraryserver : image : muallin/yacreaderlibrary-server-docker container_name : yacreaderlibraryserver restart : unless-stopped volumes : - /etc/localtime:/etc/localtime:ro - ${DOCKERCONFDIR}/yacreaderlibraryserver:/config - ${DOCKERSTORAGEDIR}:/storage ports : - \"8080:8080\"","title":"Example Docker Compose Override"}]}